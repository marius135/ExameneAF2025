{
  "Task 1": {
    "solution": "Un subgraf indus bipartit conex cu număr maxim de noduri este format din nodurile {1, 2, 3, 4, 5, 6} cu bipartiția {1, 3, 5} și {2, 4, 6}. Muchiile acestui subgraf sunt: (1,2), (1,3), (2,3), (3,4), (3,5), (3,6), (4,5) si (2,6). Acest subgraf are 6 noduri și este conex. Alte subgrafuri induse bipartite conexe pot exista, dar niciunul nu va avea mai mult de 6 noduri."
  },
  "Task 2": {
    "solution": "BFS din nodul 4:\n\nCoadă: 4\n\nVizitat: 4\n\nDistanțe: d[4] = 0\n\nExtragem 4 din coadă. Vecinii lui 4 sunt 3, 5, 8.\n\nAdăugăm 3, 5, 8 în coadă.\n\nVizităm 3, 5, 8.\n\nd[3] = 1, d[5] = 1, d[8] = 1\n\nExtragem 3. Vecinii nevizitați ai lui 3 sunt 1, 2, 6.\n\nAdăugăm 1, 2, 6 în coadă.\n\nVizităm 1, 2, 6.\n\nd[1] = 2, d[2] = 2, d[6] = 2\n\nExtragem 5. Nu are vecini nevizitați.\n\nExtragem 8. Vecinul nevizitat al lui 8 este 9.\n\nAdăugăm 9 în coadă.\n\nVizităm 9.\n\nd[9] = 2\n\nExtragem 1. Nu are vecini nevizitați.\n\nExtragem 2. Nu are vecini nevizitați.\n\nExtragem 6. Nu are vecini nevizitați.\n\nExtragem 9. Vecinul nevizitat al lui 9 este 7.\n\nAdăugăm 7 în coadă.\n\nVizităm 7.\n\nd[7] = 3\n\nExtragem 7. Nu are vecini nevizitați.\n\nArbore BFS:\n\n4\n    / | \\\n   3  5  8\n  /|      \\\n 1 2 6     9\n              \\\n               7"
  },
  "Task 3": {
    "solution": "Graful nu admite un lanț eulerian deoarece are mai mult de două noduri cu grad impar (1, 2, 5, 6, 7, 9).\n\nCondiție necesară și suficientă pentru un lanț eulerian într-un graf neorientat: Graful trebuie să fie conex și să aibă exact 0 sau 2 noduri cu grad impar.\n\nPentru a obține un lanț eulerian, putem elimina muchiile (1,2) și (7,9). Astfel, rămân doar nodurile 5 și 6 cu grad impar. Un lanț eulerian posibil în graful rezultat este: 5 - 4 - 3 - 6 - 2 - 3 - 1 - 3 - 5 - 3 - 4 - 8 - 7 - 8 - 9"
  },
  "Task 4": {
    "solution": "Algoritmul Tarjan este eficient pentru determinarea nodurilor critice. Se bazează pe parcurgerea în adâncime (DFS) și pe calcularea timpilor de descoperire și de revenire pentru fiecare nod. Un nod u este critic dacă există un fiu v al lui u astfel încât low[v] >= disc[u], unde low[v] este cel mai mic timp de descoperire accesibil din subarborele lui v prin muchii de revenire, iar disc[u] este timpul de descoperire al lui u.\n\nExemplificare (pornind din nodul 1):\n\nDFS(1): disc[1] = 1, low[1] = 1. Vizităm 2.\n\nDFS(2): disc[2] = 2, low[2] = 2. Vizităm 3.\n\nDFS(3): disc[3] = 3, low[3] = 3. Vizităm 4.\n\nDFS(4): disc[4] = 4, low[4] = 4. Vizităm 5.\n\nDFS(5): disc[5] = 5, low[5] = 5. Vizităm 3. low[5] = min(low[5], disc[3]) = 3. Revenim la 4. low[4] = min(low[4], low[5]) = 3.\n\nContinuând algoritmul, se va constata că nodul 3 este critic."
  },
  "Task 5": {
    "solution": "Algoritmul Floyd-Warshall determină distanțele minime între toate perechile de noduri într-un graf ponderat.\n\nInițializare: Matricea D este inițializată cu matricea costurilor (infinit pentru muchii inexistente).\n\nTripla iterație: for j = 1 to n, for i = 1 to n, for k = 1 to n: D[i][j] = min(D[i][j], D[i][k] + D[k][j]).\n\nExemplificare (primele 3 iterații):\n\nj = 1: D[2][3] devine min(2, 1+4) = 2 (nu se schimbă). Alte modificări posibile.\n\nj = 2: D[1][3] devine min(4, 1+2) = 3. Alte modificări posibile.\n\nj = 3: D[1][4] devine min(inf, 4+5) = 9. D[2][4] devine min(inf, 2+5) = 7. Alte modificări posibile."
  },
  "Task 6": {
    "solution": "Algoritmul lui Prim construiește un arbore parțial de cost minim.\n\nPornind din nodul 4:\n\nAdăugăm nodul 4 la arbore.\n\nMuchia de cost minim incidentă cu 4 este (4,5) cu costul 1. Adăugăm (4,5) la arbore.\n\nMuchiile de cost minim incidente cu {4,5} sunt (4,8) cu costul 3 și (5,3) cu costul 12. Alegem (4,8).\n\nMuchiile de cost minim incidente cu {4,5,8} sunt (8,7) cu costul 2, (8,9) cu costul 6 și (5,3) cu costul 12. Alegem (8,7).\n\n...\n\nContinuăm până când toate nodurile sunt în arbore."
  },
  "Task 7": {
    "solution": "Algoritmul descris nu este corect. Demonstrație prin contraexemplu: Considerăm un graf cu 4 noduri (1, 2, 3, 4) și muchiile (1,2) cu costul 1, (2,3) cu costul 2, (3,4) cu costul 3, și (1,4) cu costul 4. Algoritmul ar putea alege muchiile (1,2), (2,3) și (1,4), rezultând un cost total de 7, în timp ce arborele parțial de cost minim este format din muchiile (1,2), (2,3) și (3,4) cu costul 6."
  },
  "Task 8": {
    "solution": "(Datorită complexității desenării grafurilor cu fluxuri, nu pot desena pașii Ford-Fulkerson aici. Recomand desenarea manuală a grafului și aplicarea algoritmului Edmonds-Karp, alegând la fiecare pas lanțul f-nesaturat de lungime minimă. )\n\nO tăietură minimă este determinată de algoritm prin partiționarea nodurilor în două mulțimi: nodurile accesibile din sursă prin lanțuri f-nesaturate (S) și restul nodurilor (T). Arcele directe sunt cele care merg de la S la T, iar arcele inverse sunt cele care merg de la T la S. Capacitatea tăieturii este suma capacităților arcelor directe."
  },
  "Task 9": {
    "solution": "a) Demonstrație prin contradicție: Presupunem că graful nu este conex. Atunci există două noduri x și y care nu sunt conectate printr-un drum. Deci, N(x) și N(y) sunt disjuncte, unde N(x) reprezintă mulțimea vecinilor lui x. Avem |N(x)| >= n/2 și |N(y)| >= n/2. Dar atunci |N(x)| + |N(y)| >= n, ceea ce este imposibil deoarece N(x) și N(y) sunt disjuncte și conținute în mulțimea de n-2 noduri rămase (excluzând x și y). Contradicție. Deci graful este conex.\n\nb) Un graf nehamiltonian care satisface condiția este un graf format din două clici de dimensiuni egale (n/2) conectate printr-o singură muchie. Suma gradelor a două noduri neadiacente (câte unul din fiecare clică) este n-1 >= n, dar graful nu este hamiltonian.\n\nc) Această afirmație este o variantă a teoremei lui Ore. Demonstrația se poate face prin inducție sau prin contradicție, similar cu demonstrația teoremei lui Ore."
  },
  "Task 10": {
    "solution": "Algoritmul de programare dinamică pentru determinarea lungimii maxime a unui subșir comun folosește o matrice dp[i][j] unde dp[i][j] reprezintă lungimea maximă a unui subșir comun al prefixelor de lungime i și j ale celor două cuvinte.\n\nExemplu: \"cerceta\" și \"retea\"\n\n\t\tc\te\tr\tc\te\tt\ta\n\t0\t0\t0\t0\t0\t0\t0\t0\n\nr\t0\t0\t0\t1\t1\t1\t1\t1\ne\t0\t0\t1\t1\t1\t2\t2\t2\nt\t0\t0\t1\t1\t1\t2\t3\t3\ne\t0\t0\t1\t1\t1\t2\t3\t3\na\t0\t0\t1\t1\t1\t2\t3\t4\n\nLungimea maximă a subșirului comun este 4 (\"reta\")."
  },
  "Task 11": {
    "solution": "Modelăm problema ca un graf orientat ponderat, unde camerele sunt noduri, iar tunelurile sunt muchii cu cost 0. Camerele prăbușite au muchii de auto-buclă cu costul 1 (reprezentând folosirea dinamitei). Putem folosi algoritmul Dijkstra pentru a găsi drumul de cost minim de la camera de intrare la camera cu cristalul. Costul drumului va reprezenta numărul minim de utilizări de dinamită.\n\nComplexitate: O(m log n), unde m este numărul de muchii (tuneluri + auto-bucle) și n este numărul de camere."
  }
}
