Se da urmatorul subiect de examen:
{
  "Examen la Algoritmi Fundamentali - Varianta 2": {
    "Data": "28.01.2025",
     "Indicatii": "Pentru subiectele 1-6 vecinii unui vârf se consideră în ordine lexicografică".
    "Graf_1_6": {
      "Orientat": "Neorientat",
      "Noduri": ["1", "2", "3", "4", "5", "6", "7", "8", "9"],
      "Muchii": [
        {"x": "1", "y": "2", "w": "1"},
        {"x": "2", "y": "6", "w": "10"},
        {"x": "2", "y": "3", "w": "2"},
        {"x": "1", "y": "3", "w": "4"},
        {"x": "3", "y": "6", "w": "11"},
        {"x": "3", "y": "5", "w": "12"},
        {"x": "5", "y": "4", "w": "1"},
        {"x": "3", "y": "4", "w": "5"},
        {"x": "4", "y": "8", "w": "3"},
        {"x": "8", "y": "9", "w": "6"},
        {"x": "9", "y": "7", "w": "5"},
        {"x": "7", "y": "8", "w": "2"}
      ]
    },
    "Graf_8": {
      "Orientat": "Orientat",
      "Noduri": ["1", "2", "3", "4", "5", "6", "7"],
      "Muchii": [
        {"x": "1", "y": "2", "c": "5", "w": "10"},
        {"x": "1", "y": "5", "c": "6", "w": "6"},
        {"x": "4", "y": "2", "c": "3", "w": "3"},
        {"x": "5", "y": "4", "c": "0", "w": "3"},
        {"x": "6", "y": "4", "c": "3", "w": "5"},
        {"x": "2", "y": "6", "c": "8", "w": "9"},
        {"x": "3", "y": "6", "c": "3", "w": "3"},
        {"x": "5", "y": "3", "c": "6", "w": "7"},
        {"x": "6", "y": "7", "c": "8", "w": "10"},
        {"x": "3", "y": "7", "c": "3", "w": "7"}
      ]
    },
    "Tasks": [
      {
        "1": 5p "Indicați un subgraf indus bipartit conex cu număr maxim de noduri și o bipartiție a acestuia."
      },
      {
        "2": 5p "Exemplificați (cu explicații) cum funcționează parcurgerea în lățime bf(4), ilustrând si modul în care se poate folosi bf(4) pentru a calcula distanța de la 4 la celelalte noduri. Desenați și arborele BFS."
      },
      {
        "3": 7,5p "Admite graful un lanț eulerian? Dacă nu eliminați un număr minim de muchii astfel încât graful format să aibă un lanț eulerian, descriind și strategia după care ați ales muchiile eliminate. Indicați un lanșeulerian în graful inițial/obținut. Enunțați o condiție necesară și suficientă ca un graf neorientat să aibă un lanț eulerian."
      },
      {
        "4": 7,5p "Descrieți un algoritm eficient de determinare a nodurilor critice ale unui graf neorientat și exemplificați (cu explicații) algoritmul pentru graful din imagine."
      },
      {
        "5": 5p "Descrieți algoritmul Floyd-Warshall pentru determinarea distanțelor într-un graf neorientat ponderat cu n vârfuri, detaliind următoarea schemă: Initializarea matricei D de distanțe cu matricea costurilor. Inițializarea matricei D de distanțe cu matricea costurilor
pentru j ←  1, n execută
	pentru i ←  1, n execută
pentru k ←  1, n execută
             ............
. Scrieți ce valori se modifică în matrice pentru graful din exemplu la etapele j=1, j=2 și j=3."
      },
      {
        "6": 5p "Exemplificați pașii algoritmului lui Prim pentru graful din exemplu (cu explicații) pornind din vârful 4."
      },
      {
        "7": 5p "Este corect următorul algoritm de determinare a unui arbore parțial de cost minim al unui graf conex ponderat G = (V, E, w)? Justificați (fără a apela în justificare la modul de funcționare al altor algoritmi; rezultatele folosite trebuie demonstrate și trebuie explicat modul în care se folosesc) 
T = (V, E = ∅) – inițial V conține toate vârfurile și nu conține nicio muchie 
pentru i = 1, |V|-1 
1. Alege componenta conexă C al lui T care conține vârful i 
2. Alege o muchie de cost minim e cu o extremitate în C și cealaltă nu și adaugă e la T 
"
      },
      {
        "8": 12,5p În rețeaua de transport din figura alăturată pe un arc e sunt trecute valorile f(e)/c(e) reprezentând flux/capacitate. Sursa este vârful s=1, iar destinația t=7. 
Ilustrați pașii algoritmului Ford-Fulkerson pentru această rețea pornind de la fluxul indicat și alegând la fiecare pas un s-t lanț f-nesaturat de lungime minimă (algoritmul Edmonds-Karp). Indicați o tăietură (s-t tăietură) minimă în rețea (se vor indica vârfurile din bipartiție, arcele directe, arcele inverse și modul în care este determinată de algoritm) și determinați capacitatea acestei tăieturi. Justificați răspunsurile.
      },
      {
        "9": 15p [
          {
            "a": "Arătați că un graf cu n>2 noduri care îndeplinește condiția d(x) >= n/2 pentru orice nod x este conex."
          },
          {
            "b": "Dați exemplu de un graf nehamiltonian în care există două noduri neadiacente distince cu suma gradelor mai mare sau egală cu n."
          },
          {
            "c": "Arătați că dacă un graf G cu n ≥ 2 noduri are m≥ combinații(n-1, 2) + 2 muchii, atunci G este Hamiltonian."
          }
        ]
      },
      {
        "10": 7,5p "Descrieți pe scurt algoritmul de determinare a lungimii maxime a unui subsir comun a două cuvinte. Ilustrați algoritmul pentru cuvintele 'cerceta' și 'retea' scriind matrice cu valorile subproblemeleor și explicând cum au fost acestea calculate."
      },
      {
        "11": 15p "O echipă de exploratori a descoperit o veche hartă a unei mine subterane renumită pentru un cristal rar și valoros. Mina este compusă dintr-o serie de camere interconectate de tuneluri unidirecționale. Pentru exploratorii noștri experimentați, tunelurile se pot parcurge fără niciun efort. Totuși, unele dintre camere sunt prăbușite și pentru a le străbate ei au nevoie să folosească dinamită. Scopul echipei este să ajungă de la camera de intrare la camera care conține cristalul rar folosind cât mai puțină dinamită. Scrieți un algoritm de complexitate optimă care determină dacă există un drum pentru exploratori și, în caz că există, să determine drumul."
      }
    ]
  }
}
si urmatorul barem:
{
  "baremNumar": 2,
  "probleme": [
    {
      "problemId": "0",
      "totalPoints": 10,
      "criteria": "Din oficiu"
    },
    {
      "idProblema": "1",
      "titlu": "Subgraf indus bipartit conex cu număr maxim de noduri și bipartiția acestuia",
      "puncteTotale": 5,
      "criterii": [
        {
          "denumire": "Identificare Subgraf Bipartit Maximal Conex",
          "puncte": 4,
          "conditii": [
            {
              "descriere": "Subgraful indicat trebuie să fie bipartit, conex și maximal (cu cel mai mare număr posibil de noduri dintr-un subgraf bipartit conex al grafului original). Un subgraf corect este cel indus de nodurile {1, 3, 4, 6, 8, 9} (având 6 noduri).",
              "puncte": 4
            },
            {
              "descriere": "Dacă subgraful indicat este bipartit și conex, dar nu este maximal, se acordă cel mult 1 puncte.",
              "puncte": 1
            }
          ]
        },
        {
          "denumire": "Verificare Bipartiție",
          "puncte": 1,
          "conditii": [
            {
              "descriere": "Bipartiția subgrafului indicat trebuie să fie identificată corect. Fiecare muchie din subgraf trebuie să aibă extremitățile în mulțimi diferite. Pentru nodurile {1, 3, 4, 6, 8, 9}, o bipartiție corectă este A = {1, 4, 6, 9} și B = {3, 8}.",
              "puncte": 1
            }
          ]
        }
      ],
      "exemple": [
        {
          "tip": "Răspuns Corect",
          "subgraf": "{1, 3, 4, 6, 8, 9}",
          "bipartitie": {
            "A": ["1", "4", "6", "9"],
            "B": ["3", "8"]
          },
          "puncte": 5
        },
        {
          "tip": "Răspuns Parțial Corect",
          "subgraf": "{4, 5, 8}",
          "bipartitie": {
            "A": ["4"],
            "B": ["5", "8"]
          },
          "puncte": 2
        },
        {
          "tip": "Răspuns Incorect (Subgraf nu este bipartit)",
          "subgraf": "{1, 2, 4, 5, 6, 7, 8, 9}",
          "bipartitie": "Exemplu: A = {1, 2, 4, 5}, B = {6, 7, 8, 9}",
          "puncte": 0
        },
        {
          "tip": "Răspuns Incorect (Subgraf nu este conex)",
          "subgraf": "{1, 6, 4, 7} ∪ {2, 5, 8}",
          "puncte": "Maximum 1 (punctaj parțial foarte mic)"
        }
      ],
      "observatii": "Doar răspunsurile corecte și maxime primesc 5p, iar cele nemaximale sunt limitate la 2p."
    },
    {
      "idProblema": "2",
      "titlu": "Explorarea BFS și calculul distanțelor",
      "criterii": [
        {
          "denumire": "Ordinea corectă a explorării BFS(4)",
          "puncte": 3,
          "observatii": "Se menționează corect ordinea în care sunt vizitate nodurile. Orice eroare reduce punctajul la 1p."
        },
        {
          "denumire": "Calculul corect al distanțelor",
          "puncte": 1,
          "observatii": "Se indică corect distanțele minime de la 4 la toate nodurile. Orice eroare reduce punctajul la 0p."
        },
        {
          "denumire": "Reprezentarea corectă a arborelui BFS",
          "puncte": 1,
          "observatii": "Arborele trebuie să reflecte corect nivelurile BFS. O reprezentare incorectă anulează acest punctaj."
        }
      ],
      "exempluRaspuns": {
        "ordineBFS": "4 → 3 → 5 → 8 → 1 → 2 → 6 → 7 → 9",
        "distantieri": "[∞, 2, 2, 1, 0, 1, 2, 2, 1, 2]",
        "arboreBFS": "           4\n       /   |   \\\n      3    5    8\n     /|\\       | \\\n    1 2 6      7  9"
      }
    },
    {
      "idProblema": "3",
      "titlu": "Lanț eulerian în graf",
      "criterii": [
        {
          "denumire": "Verificarea condiției de existență a unui lanț eulerian",
          "puncte": 2,
          "observatii": "Se enunță condiția: un graf neorientat admite un lanț eulerian dacă și numai dacă are exact 0 sau 2 noduri de grad impar și este conex. Orice eroare reduce punctajul la 1p."
        },
        {
          "denumire": "Eliminarea minimă a muchiilor pentru obținerea unui lanț eulerian",
          "puncte": 2,
          "observatii": "Se identifică corect nodurile de grad impar și se elimină un număr minim de muchii pentru a obține un graf cu 0 sau 2 noduri impare. Orice greșeală minoră reduce punctajul la 1p."
        },
        {
          "denumire": "Indicarea unui lanț eulerian valid",
          "puncte": 2.5,
          "observatii": "Se scrie corect un lanț eulerian, care trece prin fiecare muchie o singură dată. Greșeli minore primesc 1p în loc de 2.5p."
        },
        {
          "denumire": "Enunțarea condiției necesare și suficiente",
          "puncte": 1,
          "observatii": "Condiția: Un graf neorientat admite un lanț eulerian dacă și numai dacă are exact 0 sau 2 noduri de grad impar și este conex. Lipsa completă sau incorectă a enunțului se acordă 0p."
        }
      ],
      "exempluRaspuns": "Pentru a obține exact 2 vârfuri impare, se elimină o muchie care leagă două vârfuri impare, de exemplu (3,4). Rezultat: vârfurile 2 și 8 au grad impar, iar graful admite lanț eulerian. Exemplu de lanț: 2→1→3→2→6→3→5→4→8→7→9→8."
    },
    {
      "idProblema": "4",
      "titlu": "Noduri critice (Articulation points) folosind DFS",
      "puncteTotale": 7.5,
      "criterii": [
        {
          "denumire": "Definirea nodurilor critice",
          "puncte": 1,
          "observatii": "Un nod este critic dacă, prin eliminarea sa (și a muchiilor incidente), crește numărul de componente conexe ale grafului."
        },
        {
          "denumire": "Valorile finale ale vectorilor disc și low",
          "puncte": 1.5,
          "observatii": "Listarea/argumentarea corectă a valorilor la finalul parcurgerii DFS."
        },
        {
          "denumire": "Aplicarea practică",
          "puncte": 2,
          "observatii": "Menționarea ordinii de vizitare DFS (ex: 1 → 2 → 3 → 4 → 5 → 8 → 7 → 9 → 6) și identificarea back edge-urilor (ex: 3→1, 6→2, 9→8)."
        },
        {
          "denumire": "Identificarea nodurilor critice",
          "puncte": 3,
          "observatii": "Lista finală: 3, 4 și 8, cu scurte justificări (de ex., 3 este critic deoarece un copil, 4, are low[4] ≥ disc[3])."
        }
      ]
    },
    {
      "idProblema": "5",
      "titlu": "Algoritmul Floyd-Warshall",
      "puncteTotale": 5,
      "criterii": [
        {
          "denumire": "Menționare foarte scurtă a ideii",
          "puncte": 1,
          "observatii": "Algoritmul calculează toate distanțele minime dintre perechi de noduri iterând prin k de la 1 la n. Formula: D[i][j] = min(D[i][j], D[i][k] + D[k][j])."
        },
        {
          "denumire": "Scrierea codului",
          "puncte": 1,
          "observatii": "Prezentarea unui pseudocod tipic cu trei bucle for."
        },
        {
          "denumire": "Afișarea matricei D după pașii k=1, k=2 și k=3",
          "puncte": 3,
          "observatii": "Se acordă 1p pentru fiecare afișare și explicații scurte despre modificări (ex: D[x][y] scade de la 10 la 7)."
        }
      ]
    },
    {
      "idProblema": "6",
      "titlu": "Algoritmul lui Prim",
      "puncteTotale": 5,
      "criterii": [
        {
          "denumire": "Prezentarea ideii de bază",
          "puncte": 1,
          "observatii": "Algoritmul lui Prim construiește un arbore parțial de cost minim pornind din nodul 4, adăugând de fiecare dată cea mai ieftină muchie care conectează un nod din MST cu un nod nou."
        },
        {
          "denumire": "Exemplificare pas cu pas",
          "puncte": 3,
          "observatii": "Explicarea ordinii de selecție a muchiilor și actualizarea nodurilor în MST."
        },
        {
          "denumire": "Rezultatul final",
          "puncte": 1,
          "observatii": "Listarea clară a muchiilor din MST, de exemplu: (4,5) – cost 1, (4,8) – cost 3, (8,7) – cost 2, (7,9) – cost 5, (3,4) – cost 5, (2,3) – cost 2, (1,2) – cost 1, (6,2) – cost 10."
        }
      ]
    },
    {
      "idProblema": "7",
      "titlu": "Justificarea unui algoritm de obținere a unui arbore parțial de cost minim",
      "puncteTotale": 5,
      "criterii": [
        {
          "denumire": "Rezumatul algoritmului",
          "puncte": 1,
          "observatii": "Inițial, T este gol; pentru fiecare i de la 1 la |V|-1 se adaugă cea mai ieftină muchie care conectează componenta ce conține i la un nod extern."
        },
        {
          "denumire": "Justificare",
          "puncte": 3,
          "observatii": "Se oferă un argument inductiv sau prin cicluri/exchange, demonstrând că la fiecare pas se face o alegere optimă local, astfel încât T este un arbore de cost minim."
        },
        {
          "denumire": "Concluzie",
          "puncte": 1,
          "observatii": "Se afirmă explicit că algoritmul este corect."
        }
      ]
    },
    {
      "idProblema": "8",
      "titlu": "Algoritmul Edmonds-Karp pe rețeaua dată",
      "puncteTotale": 12.5,
      "criterii": [
        {
          "denumire": "Pașii de creștere a fluxului",
          "puncte": 5,
          "pasii": [
            {
              "pas": "Primul drum",
              "drum": "1 → 2 → 6 → 7",
              "bottleneck": 1,
              "crestereFlux": 1
            },
            {
              "pas": "Al doilea drum",
              "drum": "1 → 2 → 4 → 6 → 7",
              "bottleneck": 1,
              "crestereFlux": 1
            },
            {
              "pas": "Al treilea drum",
              "drum": "1 → 2 → 4 → 6 → 3 → 7",
              "bottleneck": 2,
              "crestereFlux": 2
            }
          ],
          "observatii": "Flux total crescut: 1 + 1 + 2 = 4 unități."
        },
        {
          "denumire": "Concluzia: fluxul final și oprirea algoritmului",
          "puncte": 2.5,
          "observatii": "Algoritmul se oprește când nu mai există drum s→t în rețeaua reziduală. Fluxul final se calculează ca suma fluxurilor care ies din sursă (1) sau intră în destinație (7), de exemplu 15."
        },
        {
          "denumire": "Tăietura minimă",
          "puncte": 5,
          "observatii": "Se determină S ca mulțimea nodurilor accesibile din 1 în rețeaua reziduală finală, iar T = V \\ S. Exemple: S = {1, 2, 4} și T = {3, 5, 6, 7}. Se punctează atât arcele directe, cât și cele inverse."
        }
      ]
    },
    {
      "idProblema": "9",
      "titlu": "Teorema lui Ore și exerciții conexe",
      "puncteTotale": 15,
      "subprobleme": [
        {
          "idSubproblema": "a",
          "descriere": "Arătați că un graf cu n > 2 noduri, în care pentru orice nod x se are d(x) ≥ n/2, este conex",
          "puncte": 4,
          "criterii": {
            "enunt": "Precizarea condiției: fiecare nod are grad ≥ n/2 (1p)",
            "argument": "Dacă ar exista două componente, orice nod dintr-o componentă ar avea grad mai mic decât n/2 (3p)"
          }
        },
        {
          "idSubproblema": "b",
          "descriere": "Exemplu de graf nehamiltonian cu două noduri neadiacente a căror sumă a gradelor e ≥ n",
          "puncte": 4,
          "criterii": {
            "constructie": "Prezentarea explicită a unui graf, de exemplu un graf bipartit complet cu partiții inegale (2p)",
            "verificare": "Demonstrarea existenței a două noduri neadiacente cu d(u) + d(v) ≥ n și a faptului că graful nu este hamiltonian (2p)"
          }
        },
        {
          "idSubproblema": "c",
          "descriere": "Demonstrație privind Teorema lui Ore",
          "puncte": 7,
          "observatii": "7p pentru răspuns corect și complet; 4-6p pentru răspuns parțial; 2-3p pentru răspuns incomplet/confuz; 0p pentru lipsă."
        }
      ]
    },
    {
      "idProblema": "10",
      "titlu": "Cel mai lung subsir comun (LCS)",
      "parti": [
        {
          "idPartea": "1",
          "descriere": "Descriere foarte scurtă a metodei",
          "puncte": 1.5,
          "detalii": "Folosim programare dinamică. Definim o matrice dp[i][j] unde dp[i][j] reprezintă lungimea maximă a unui subsir comun între primele i caractere din primul cuvânt și primele j caractere din al doilea. Recurrența: dp[i][0] = 0, dp[0][j] = 0; dacă X[i] == Y[j] atunci dp[i][j] = dp[i-1][j-1] + 1, altfel dp[i][j] = max(dp[i-1][j], dp[i][j-1])."
        },
        {
          "idPartea": "2",
          "descriere": "Exemplificare",
          "puncte": 4,
          "exemplu": {
            "cuvant1": "cerceta",
            "lungime1": 7,
            "cuvant2": "retea",
            "lungime2": 5,
            "matriceDP": [
              ["-", "r", "e", "t", "e", "a"],
              [0, 0, 0, 0, 0, 0],
              ["c", 0, 0, 0, 0, 0],
              ["e", 0, 1, 1, 1, 1],
              ["r", 0, 1, 1, 1, 1],
              ["c", 0, 1, 1, 1, 1],
              ["e", 0, 1, 2, 2, 2],
              ["t", 0, 1, 2, 3, 3],
              ["a", 0, 1, 2, 3, 3, 4]
            ]
          }
        },
        {
          "idPartea": "3",
          "descriere": "Concluzie",
          "puncte": 2,
          "detalii": "Valoarea maximă este dp[7][5] = 4, deci lungimea celui mai lung subsir comun este 4. Un exemplu de subsir comun ar putea fi 'r e t a'."
        }
      ]
    },
    {
      "idProblema": "11",
      "titlu": "Mina Subterană - Drum cu Dinamită Minimă",
      "puncteTotale": 15,
      "sectiuni": [
        {
          "idSectiune": "A",
          "titlu": "Descrierea Soluției",
          "puncte": 7.5,
          "criterii": [
            {
              "descriere": "Soluție Optimă cu 0-1 BFS",
              "puncte": 7.5,
              "detalii": "Modelarea problemei ca graf cu costuri 0/1 (camere prăbușite au cost 1, tuneluri cost 0); utilizarea unei cozi duble (deque) în care nodurile cu cost 0 se adaugă în față, iar cele cu cost 1 la spate; explicație clară a algoritmului 0-1 BFS."
            },
            {
              "descriere": "Soluție Alternativă cu Dijkstra",
              "puncte": 5,
              "observatii": "Algoritmul Dijkstra adaptat pentru ponderi 0/1; punctajul maxim este 5, dar dacă explicația este parțială se poate acorda maxim 3 puncte."
            },
            {
              "descriere": "Soluție cu BFS Simplu",
              "puncte": 2,
              "observatii": "Dacă se propune un BFS simplu fără adaptarea la costurile 0/1, se acordă maximum 2 puncte."
            }
          ]
        },
        {
          "idSectiune": "B",
          "titlu": "Discuția Complexității",
          "puncte": 7.5,
          "criterii": [
            {
              "descriere": "Analiza Complexității 0-1 BFS",
              "puncte": 7.5,
              "detalii": "Se explică complexitatea O(V + E), justificând că fiecare nod este adăugat în deque de cel mult o dată și fiecare muchie este relaxată de cel mult o dată (sau de un număr mic constant de ori)."
            },
            {
              "descriere": "Analiza Complexității Dijkstra",
              "puncte": 6,
              "detalii": "Algoritmul Dijkstra cu coadă de priorități are complexitatea O(E log V); se explică operațiile de inserare și extragere din coadă."
            },
            {
              "descriere": "Alte soluții (ex. Bellman Ford)",
              "puncte": 3,
              "observatii": "Se acordă puncte în funcție de corectitudine și de complexitatea explicată (ex: O(V^2))."
            }
          ]
        }
      ]
    }
  ]
}
evalueaza lucrarea ce urmeaza si la final creaza un tabel cu 3 coloane: exercițiul, punctaj, explicație scurtă. Nu uita sa adaugi si 1p din oficiu. Te rog corecteaza conform baremului primit!
