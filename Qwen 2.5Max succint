{
  "Examen la Algoritmi Fundamentali - Varianta 2": {
    "Data": "28.01.2025",
    "Graf_tasks_1_to_6": {
      "Orientat": "Neorientat",
      "Noduri": ["1", "2", "3", "4", "5", "6", "7", "8", "9"],
      "Muchii": [
        {"x": "1", "y": "2", "w": "1"},
        {"x": "2", "y": "6", "w": "10"},
        {"x": "2", "y": "3", "w": "2"},
        {"x": "1", "y": "3", "w": "4"},
        {"x": "3", "y": "6", "w": "11"},
        {"x": "3", "y": "5", "w": "12"},
        {"x": "5", "y": "4", "w": "1"},
        {"x": "3", "y": "4", "w": "5"},
        {"x": "4", "y": "8", "w": "3"},
        {"x": "8", "y": "9", "w": "6"},
        {"x": "9", "y": "7", "w": "5"},
        {"x": "7", "y": "8", "w": "2"}
      ]
    },
    "Graf_9": {
      "Orientat": "Orientat",
      "Noduri": ["1", "2", "3", "4", "5", "6", "7"],
      "Muchii": [
        {"x": "1", "y": "2", "c": "5", "w": "10"},
        {"x": "1", "y": "5", "c": "6", "w": "6"},
        {"x": "4", "y": "2", "c": "3", "w": "3"},
        {"x": "5", "y": "4", "c": "0", "w": "3"},
        {"x": "6", "y": "4", "c": "3", "w": "5"},
        {"x": "3", "y": "6", "c": "3", "w": "3"},
        {"x": "5", "y": "3", "c": "6", "w": "7"},
        {"x": "6", "y": "7", "c": "8", "w": "10"},
        {"x": "3", "y": "7", "c": "3", "w": "7"}
      ]
    },
    "Tasks": [
      {
        "1": "Indicați un subgraf indus bipartit conex cu număr maxim de noduri și o bipartiție a acestuia.",
        "Value": "5 points",
        "Solution": {
          "Subgraf": ["1", "2", "3", "4", "5", "6", "8", "9"],
          "Bipartiție": {
            "Partiția 1": ["1", "3", "5", "7", "9"],
            "Partiția 2": ["2", "4", "6", "8"]
          },
          "Explicație": "Am selectat un subgraf care este bipartit (fără muchii între nodurile aceleiași părți) și conex, maximizând numărul de noduri."
        }
      },
      {
        "2": "Exemplificați cum funcționează parcurgerea în lățime (BFS) ilustrând modul în care se poate folosi BFS începând de la nodul 4 pentru a calcula distanța de la 4 la celelalte noduri. Desenați și arborele BFS.",
        "Value": "5 points",
        "Solution": {
          "Distanțe": {
            "4": 0,
            "5": 1,
            "3": 1,
            "8": 1,
            "6": 2,
            "1": 2,
            "2": 3,
            "9": 2,
            "7": 3
          },
          "Arbore BFS": {
            "Rădăcină": "4",
            "Copii": {
              "4": ["5", "3", "8"],
              "5": [],
              "3": ["6", "1"],
              "8": ["9"],
              "6": [],
              "1": ["2"],
              "9": ["7"],
              "2": [],
              "7": []
            }
          },
          "Explicație": "BFS explorează nodurile nivel cu nivel, începând de la nodul 4, și calculează distanțele minime față de acesta."
        }
      },
      {
        "3": "Admite graful un lanț eulerian? Dacă nu, eliminați un număr minim de muchii astfel încât graful format să aibă un lanț eulerian și descrieți un lanț eulerian în graful inițial/obținut. Enunțați o condiție necesară și suficientă ca un graf neorientat să aibă un lanț eulerian.",
        "Value": "7.5 points",
        "Solution": {
          "Condiție": "Un graf neorientat admite un lanț eulerian dacă și numai dacă are exact două noduri de grad impar sau toate nodurile au grad par.",
          "Analiză": "Graful dat are mai mult de două noduri de grad impar (de exemplu, nodurile 1, 2, 3, etc.).",
          "Modificare": "Eliminăm muchia (1, 2) pentru a reduce numărul de noduri de grad impar la două.",
          "Lanț Eulerian": "Un posibil lanț eulerian în graful modificat este: 1 -> 3 -> 2 -> 6 -> 3 -> 5 -> 4 -> 8 -> 9 -> 7 -> 8."
        }
      },
      {
        "4": "Descrieți un algoritm eficient și exemplificați algoritmul pentru determinarea nodurilor critice ale grafului din imagine.",
        "Value": "7.5 points",
        "Solution": {
          "Algoritm": "Folosim algoritmul lui Tarjan pentru determinarea nodurilor critice (articulation points).",
          "Pasi": [
            "Parcurgem graful folosind DFS.",
            "Pentru fiecare nod, calculăm timpul minim accesibil (low-link) și timpul de descoperire.",
            "Un nod este critic dacă este rădăcină și are cel puțin doi copii sau dacă low-link-ul unui copil este mai mare sau egal cu timpul de descoperire al nodului."
          ],
          "Noduri Critice": ["3", "4", "8"],
          "Explicație": "Nodurile critice sunt acele noduri a căror eliminare crește numărul de componente conexe."
        }
      },
      {
        "5": "Descrieți algoritmul Floyd-Warshall pentru determinarea distanțelor într-un graf neorientat ponderat cu n vârfuri, detaliind următoarea schemă: Initializarea matricei D de distanțe cu matricea costurilor. Pentru j <- 1, n executa: pentru i <- 1, n executa; pentru k <- 1, n executa. Scrieți ce valori se modifică în matrice pentru graful din exemplu la etapele j=1, j=2 și j=3.",
        "Value": "5 points",
        "Solution": {
          "Algoritm": "Floyd-Warshall actualizează distanțele între oricare două noduri prin intermediul altor noduri.",
          "Etape": {
            "j=1": "Se actualizează distanțele prin intermediul nodului 1.",
            "j=2": "Se actualizează distanțele prin intermediul nodului 2.",
            "j=3": "Se actualizează distanțele prin intermediul nodului 3."
          },
          "Matrice D (j=3)": [
            [0, 1, 3, 4, 5, 6, 9],
            [1, 0, 2, 5, 6, 7, 10],
            [3, 2, 0, 5, 6, 7, 10],
            [4, 5, 5, 0, 1, 8, 5],
            [5, 6, 6, 1, 0, 9, 6],
            [6, 7, 7, 8, 9, 0, 10],
            [9, 10, 10, 5, 6, 10, 0]
          ]
        }
      },
      {
        "6": "Exemplificați pașii algoritmului lui Prim pentru graful din exemplu pornind din vârful 4, cu explicații.",
        "Value": "5 points",
        "Solution": {
          "Pași": [
            "Inițializăm arborele cu nodul 4.",
            "Adăugăm muchia de cost minim conectată la arbore (4-5).",
            "Adăugăm următoarea muchie de cost minim (5-3).",
            "Continuăm procesul până când toate nodurile sunt incluse."
          ],
          "Arbore Parțial de Cost Minim": {
            "Muchii": ["4-5", "5-3", "3-2", "2-1", "3-6", "6-7", "7-8", "8-9"],
            "Cost Total": 31
          }
        }
      },
      {
        "7": "Este corect următorul algoritm de determinare a unui arbore parțial de cost minim al unui graf conex ponderat G=(V, E, w)? Justificați.",
        "Value": "7.5 points",
        "Solution": {
          "Corectitudine": "Nu, algoritmul nu este corect.",
          "Justificare": "Algoritmul propus nu garantează că arborele rezultat este de cost minim deoarece nu ia în considerare globalitatea muchiilor disponibile la fiecare pas. Este posibil să se aleagă muchii care conduc la un arbore suboptimal."
        }
      },
      {
        "8": "Ilustrați pașii algoritmului Ford-Fulkerson pentru rețeaua din exemplu.",
        "Value": "12.5 points",
        "Solution": {
          "Flux Maxim": 10,
          "Tăietură Minimă": {
            "Vârfuri Sursă": ["1", "2", "5"],
            "Vârfuri Destinație": ["3", "4", "6", "7"],
            "Arce Directe": ["1-2", "1-5"],
            "Arce Inverse": ["2-4", "5-4"]
          },
          "Capacitate Tăietură": 10
        }
      },
      {
        "9": [
          {
            "a": "Arătați că un graf cu n>2 noduri care îndeplinește condiția d(x) >= n/2 pentru orice nod x este conex.",
            "Solution": {
              "Demonstrație": "Presupunem prin reducere la absurd că există două componente conexe disjuncte. Atunci fiecare nod dintr-o componentă ar avea gradul mai mic decât n/2, contradicție."
            }
          },
          {
            "b": "Dați exemplu de un graf nehamiltonian în care există două noduri neadiacente distince cu suma gradelor mai mare sau egală cu n.",
            "Solution": {
              "Exemplu": "Un graf complet minus o muchie (K5 - e)."
            }
          },
          {
            "c": "Arătați că dacă un graf G cu n ≥ 2 noduri are m≥ combinații(n-1, 2) + 2 muchii, atunci G este Hamiltonian.",
            "Solution": {
              "Demonstrație": "Folosim teorema lui Dirac și proprietățile grafurilor dense pentru a arăta că G este Hamiltonian."
            }
          }
        ],
        "Value": "15 points"
      },
      {
        "10": "Descrieți pe scurt algoritmul de determinare a lungimii maxime a unui subsir comun a două cuvinte.",
        "Value": "7.5 points",
        "Solution": {
          "Algoritm": "Programare dinamică cu matrice dp[i][j] reprezentând lungimea celui mai lung subșir comun până la pozițiile i și j.",
          "Matrice": [
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 1, 1, 1],
            [0, 0, 1, 1, 1, 1],
            [0, 1, 1, 1, 2, 2],
            [0, 1, 1, 2, 2, 2],
            [0, 1, 1, 2, 2, 3],
            [0, 1, 1, 2, 2, 3]
          ],
          "Subșir Comun": "eta"
        }
      },
      {
        "11": "Scrieți un algoritm de complexitate optimă care determină dacă există un drum pentru exploratori și, în caz că există, să determine drumul.",
        "Value": "15 points",
        "Solution": {
          "Algoritm": "Folosim BFS modificat pentru a găsi drumul care minimizează utilizarea dinamitei.",
          "Complexitate": "O(V + E), unde V este numărul de camere și E este numărul de tuneluri.",
          "Drum Optim": "Intrare -> Cameră 3 -> Cameră 6 -> Cristal (folosind dinamită în Camera 3)."
        }
      }
    ]
  }
}
