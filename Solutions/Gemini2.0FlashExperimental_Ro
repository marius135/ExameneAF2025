Absolut! Iată rezolvarea detaliată a examenului, din perspectiva unui student dedicat și pasionat de algoritmi:

Examen Algoritmi Fundamentali - Varianta 2

1. Subgraf Induse Bipartit Conex cu Număr Maxim de Noduri (5p)

Analiză: Un subgraf bipartit nu conține muchii între noduri din aceeași partiție. Căutăm un subgraf conex cu cel mai mare număr de noduri.

Soluție:

Subgraful indus format din nodurile {1, 2, 3, 4, 5, 8, 9} este bipartit.

Partiția: {1, 3, 5, 9} și {2, 4, 8}.

Pentru a demonstra că subgraful este bipartit, verificăm că toate muchiile leagă un nod din prima partiție cu un nod din a doua partiție.

Muchiile subgrafului sunt: (1,2),(2,3),(3,4), (3,5), (4,5), (4,8), (8,9)

(1,2) - (1 din prima partiție, 2 din a doua)

(2,3) - (2 din a doua partiție, 3 din prima)

(3,4) - (3 din prima partiție, 4 din a doua)

(3,5) - (3 din prima partiție, 5 din prima) nu e bun

(4,5) - (4 din a doua partiție, 5 din prima)

(4,8) - (4 din a doua partiție, 8 din a doua) nu e bun

(8,9) - (8 din a doua partiție, 9 din prima)

O altă posibilă partiție care produce un subgraf bipartit este {1,4,6,7} și {2,3,5,8,9} cu muchiile {1,2}, {2,3}, {2,6}, {3,4}, {3,5}, {4,8}, {7,9}, {8,9}

Un subgraf bipartit conex cu un numar maxim de noduri este format din nodurile {1, 2, 3, 4, 5, 7, 8, 9}.

Partiția: {1, 3, 5, 7} și {2, 4, 8, 9}.

Muchiile subgrafului sunt: {1,2}, {2,3}, {3,4}, {3,5}, {4,8}, {7,9}, {8,9}. Se poate observa că toate muchiile leagă noduri din partiții diferite. Subgraful este conex.

2. Parcurgere în Lățime (BFS) din Nodul 4 (5p)

Analiză: BFS explorează graful pe niveluri.

Implementare:

Coada: [4]

Noduri vizitate: {4}

Distanțe: dist[4] = 0, restul infinit

Pas 1: Extrage 4. Vecinii lui 4: 3, 5, 8. Coada: [3, 5, 8]. Dist[3]=1, Dist[5]=1, Dist[8]=1. Noduri vizitate: {4, 3, 5, 8}.

Pas 2: Extrage 3. Vecinii lui 3: 1, 2, 4, 5, 6. Coada: [5, 8, 1, 2, 6]. Dist[1]=2, Dist[2]=2, Dist[6]=2. Noduri vizitate: {4, 3, 5, 8, 1, 2, 6}.

Pas 3: Extrage 5. Vecinii lui 5: 3, 4. Coada: [8, 1, 2, 6]. Noduri vizitate: {4, 3, 5, 8, 1, 2, 6}.

Pas 4: Extrage 8. Vecinii lui 8: 4, 7, 9. Coada: [1, 2, 6, 7, 9]. Dist[7]=2, Dist[9]=2. Noduri vizitate: {4, 3, 5, 8, 1, 2, 6, 7, 9}.

Pas 5: Extrage 1. Vecinii lui 1: 2, 3. Coada: [2, 6, 7, 9]. Noduri vizitate: {4, 3, 5, 8, 1, 2, 6, 7, 9}.

Pas 6: Extrage 2. Vecinii lui 2: 1, 3, 6. Coada: [6, 7, 9]. Noduri vizitate: {4, 3, 5, 8, 1, 2, 6, 7, 9}.

Pas 7: Extrage 6. Vecinii lui 6: 2, 3. Coada: [7, 9]. Noduri vizitate: {4, 3, 5, 8, 1, 2, 6, 7, 9}.

Pas 8: Extrage 7. Vecinii lui 7: 8, 9. Coada: [9]. Noduri vizitate: {4, 3, 5, 8, 1, 2, 6, 7, 9}.

Pas 9: Extrage 9. Vecinii lui 9: 7, 8. Coada: []. Noduri vizitate: {4, 3, 5, 8, 1, 2, 6, 7, 9}.

Distanțe:

dist(4, 4) = 0

dist(4, 3) = 1, dist(4, 5) = 1, dist(4, 8) = 1

dist(4, 1) = 2, dist(4, 2) = 2, dist(4, 6) = 2, dist(4, 7) = 2, dist(4, 9) = 2

Arborele BFS: Muchiile folosite pentru a ajunge la fiecare nod pentru prima oara în parcurgerea BFS sunt: (4,3), (4,5), (4,8), (3,1), (3,2), (3,6), (8,7), (8,9).

3. Lanț Eulerian (7.5p)

Analiză: Un graf are un lanț eulerian dacă are exact 0 sau 2 noduri de grad impar.

Verificare Graf Initial:

Grad(1) = 2

Grad(2) = 3

Grad(3) = 4

Grad(4) = 4

Grad(5) = 3

Grad(6) = 3

Grad(7) = 2

Grad(8) = 3

Grad(9) = 2

Noduri de grad impar: 2, 5, 6, 8. Sunt 4, deci nu există lanț eulerian.

Eliminare Muchii: Pentru a obține un lanț eulerian, trebuie să reducem numărul de noduri cu grad impar la 2 sau 0.

Strategie: Eliminăm muchii dintre nodurile de grad impar.

Soluție: Eliminăm muchiile (2,6), și (5,8) (sau oricare alte două perechi).

Lanț Eulerian:

Un posibil lanț după eliminarea muchiilor este: 1-2-3-6-3-5-4-8-9-7-8-4-1.

Un posibil lanț în graful inițial (dacă pornim dintr-unul din nodurile de grad impar): 2-1-3-6-2-3-5-4-8-9-7-8-4-5-3

Condiție Necesară și Suficientă: Un graf neorientat are un lanț eulerian dacă și numai dacă are cel mult două noduri de grad impar.

4. Noduri Critice (7.5p)

Analiză: Un nod critic este un nod care, dacă este eliminat (împreună cu muchiile adiacente), crește numărul de componente conexe.

Algoritm Eficient (bazat pe DFS):

Execută un DFS. Calculează timpul de descoperire (dt) și timpul minim de revenire (low) pentru fiecare nod.

Nod Rădăcină DFS: Nodul rădăcină al DFS este critic dacă are mai mult de un copil în arborele DFS.

Nod Non-Rădăcină DFS: Un nod non-rădăcină u este critic dacă există un copil v al lui u în arborele DFS, astfel încât low[v] >= dt[u].

Exemplificare:

Alegem nodul 1 ca punct de plecare al DFS.

DFS(1):

dt[1] = 1, low[1] = 1. Vizităm 2.

DFS(2):

dt[2] = 2, low[2] = 2. Vizităm 3.

DFS(3):

dt[3] = 3, low[3] = 3. Vizităm 4.

DFS(4):

dt[4] = 4, low[4] = 4. Vizităm 5.

DFS(5):

dt[5] = 5, low[5] = 5. Vizităm 3 (înapoi).

low[5] = min(low[5], dt[3]) = min(5, 3) = 3.

Înapoi la 4. Vizităm 8.

DFS(8):

dt[8]=6, low[8]=6. Vizităm 9.

DFS(9):

dt[9]=7, low[9]=7. Vizităm 7.

DFS(7):

dt[7]=8, low[7]=8. Vizităm 8.

low[7] = min(low[7], dt[8]) = min(8,6)=6

Înapoi la 9. Vizităm 7.

low[9] = min(low[9], low[7]) = min(7,6)=6

Înapoi la 8. Vizităm 4.

low[8] = min(low[8], dt[4])=min(6,4)=4

Înapoi la 4.

low[4] = min(low[4], low[5]) = min(4, 3) = 3. low[4] = min(low[4], low[8])=min(3,4)=3

Înapoi la 3. Vizităm 6.

DFS(6):

dt[6] = 9, low[6] = 9. Vizităm 2.

low[6] = min(low[6], dt[2]) = min(9,2) = 2

Înapoi la 3.

low[3]=min(low[3], low[4]) = min(3,3)=3, low[3]=min(low[3], low[6]) = min(3,2) = 2

Înapoi la 2.

low[2]=min(low[2], low[3]) = min(2,2)=2

Înapoi la 1.

low[1] = min(low[1], low[2])=min(1,2)=1

Analiză Noduri:

1: Rădăcină DFS. Are un singur copil în arborele DFS, deci nu este critic.

2: Are un copil (3) cu low[3] = 2 >= dt[2] = 2. Deci 2 este critic.

3: Are un copil (4) cu low[4] = 3 >= dt[3] = 3. Deci 3 este critic.

4: Are un copil (5) cu low[5] = 3 >= dt[4] = 4 - fals

4: Are un copil (8) cu low[8] = 4 >= dt[4] = 4 - fals

5: Nu este critic (nu este nod non-rădăcină)

6: Nu este critic (nu este nod non-rădăcină)

7: Nu este critic (nu este nod non-rădăcină)

8: Nu este critic (nu este nod non-rădăcină)

9: Nu este critic (nu este nod non-rădăcină)

Rezultat: Nodurile critice sunt 2 și 3.

5. Algoritmul Floyd-Warshall (5p)

Analiză: Floyd-Warshall calculează distanțele minime între toate perechile de noduri.

Descriere Algoritm:

Inițializare: Matricea D[i][j] este inițializată cu costul muchiei (i, j) (infinit dacă nu există muchie). D[i][i] = 0.

Iterații:

pentru k = 1 la n:
    pentru i = 1 la n:
        pentru j = 1 la n:
            D[i][j] = min(D[i][j], D[i][k] + D[k][j])
Use code with caution.
Această formulă încearcă să găsească un drum mai scurt de la nodul i la nodul j trecând prin nodul k.

Matricea Costurilor (inițializare):

D = [
    [0, 1, 4, inf, inf, inf, inf, inf, inf],
    [1, 0, 2, inf, inf, 10, inf, inf, inf],
    [4, 2, 0, 5, 12, 11, inf, inf, inf],
    [inf, inf, 5, 0, 1, inf, inf, 3, inf],
    [inf, inf, 12, 1, 0, inf, inf, inf, inf],
    [inf, 10, 11, inf, inf, 0, inf, inf, inf],
    [inf, inf, inf, inf, inf, inf, 0, 2, 5],
    [inf, inf, inf, 3, inf, inf, 2, 0, 6],
    [inf, inf, inf, inf, inf, inf, 5, 6, 0]
]
Use code with caution.
Etape:

j = 1:

Nu se schimbă nicio valoare, deoarece D[i][1] + D[1][k] nu va fi niciodată mai mică decât distanța deja existentă.

Exemplu: pentru i = 2 și k = 3, D[2][3]=2, D[2][1]=1, D[1][3]=4. 1 + 4 > 2, deci nu se schimbă

j = 2:

D[1][3] = min(4, 1 + 2) = 3

D[3][1] = min(4, 2 + 1) = 3

D[1][6] = min(inf, 1 + 10) = 11

D[6][1] = min(inf, 10 + 1) = 11

D[3][6] = min(11, 2 + 10) = 11

D[6][3] = min(11, 10 + 2) = 11

Exemplu: pentru i = 1 și k = 3, D[1][3] = min(D[1][3], D[1][2]+D[2][3]) = min(4,1+2)=3.

Matricea va deveni:

D = [
    [0, 1, 3, inf, inf, 11, inf, inf, inf],
    [1, 0, 2, inf, inf, 10, inf, inf, inf],
    [3, 2, 0, 5, 12, 11, inf, inf, inf],
    [inf, inf, 5, 0, 1, inf, inf, 3, inf],
    [inf, inf, 12, 1, 0, inf, inf, inf, inf],
    [11, 10, 11, inf, inf, 0, inf, inf, inf],
    [inf, inf, inf, inf, inf, inf, 0, 2, 5],
    [inf, inf, inf, 3, inf, inf, 2, 0, 6],
    [inf, inf, inf, inf, inf, inf, 5, 6, 0]
]
Use code with caution.
j = 3:

D[1][4] = min(inf, 3 + 5) = 8

D[1][5] = min(inf, 3 + 12) = 15

D[1][6] = min(11, 3 + 11) = 11

D[2][1] = min(1, 2 + 3) = 1

D[2][4] = min(inf, 2+5) = 7

D[2][5] = min(inf, 2+12) = 14

D[2][6] = min(10, 2+11) = 10

D[4][1] = min(inf, 5 + 3) = 8

D[4][2] = min(inf, 5+2) = 7

D[4][6] = min(inf, 5+11) = 16

D[5][1] = min(inf, 12 + 3) = 15

D[5][2] = min(inf, 12+2) = 14

D[5][6] = min(inf, 12+11) = 23

D[6][1] = min(11, 11+3) = 11

D[6][2] = min(10, 11+2) = 10

D[6][4] = min(inf, 11+5) = 16

D[6][5] = min(inf, 11+12) = 23

6. Algoritmul lui Prim (5p)

Analiză: Prim construiește un arbore parțial de cost minim, adăugând muchii la arbore pe măsură ce costul minim le găsește.

Pași (pornind din 4):

Inițializare: Arbore T = {4}, muchii disponibile: (4,3)=5, (4,5)=1, (4,8)=3.

Pas 1: Adaugă muchia (4,5) cu costul 1. T = {4, 5}, muchii: (4,3), (4,8), (5,3)=12, noduri conectate={4,5}, muchii disponibile: (4,3), (4,8), (5,3).

Pas 2: Adaugă muchia (4,8) cu costul 3. T = {4, 5, 8}, muchii: (4,3), (5,3), (8,9)=6, (8,7)=2, noduri conectate={4,5,8}, muchii disponibile: (4,3), (5,3), (8,9), (8,7).

Pas 3: Adaugă muchia (8,7) cu costul 2. T = {4, 5, 8, 7}, muchii: (4,3), (5,3), (8,9), (7,9)=5, noduri conectate={4,5,8,7}, muchii disponibile: (4,3), (5,3), (8,9), (7,9).

Pas 4: Adaugă muchia (4,3) cu costul 5. T = {4, 5, 8, 7, 3}, muchii: (5,3), (8,9), (7,9), (3,1)=4, (3,2)=2, (3,6)=11, noduri conectate={4,5,8,7,3}, muchii disponibile: (5,3), (8,9), (7,9), (3,1), (3,2), (3,6).

Pas 5: Adaugă muchia (3,2) cu costul 2. T = {4, 5, 8, 7, 3, 2}, muchii: (8,9), (7,9), (3,1), (3,6), (2,1)=1, (2,6)=10, noduri conectate={4,5,8,7,3,2}, muchii disponibile: (8,9), (7,9), (3,1), (3,6), (2,1), (2,6).

Pas 6: Adaugă muchia (2,1) cu costul 1. T = {4, 5, 8, 7, 3, 2, 1}, muchii: (8,9), (7,9), (3,6), (2,6), noduri conectate={4,5,8,7,3,2,1}, muchii disponibile: (8,9), (7,9), (3,6), (2,6).

Pas 7: Adaugă muchia (8,9) cu costul 6. T = {4, 5, 8, 7, 3, 2, 1, 9}, muchii: (3,6), (2,6), noduri conectate={4,5,8,7,3,2,1,9}, muchii disponibile: (3,6), (2,6).

Pas 8: Adaugă muchia (3,6) cu costul 11. T = {4, 5, 8, 7, 3, 2, 1, 9, 6}, noduri conectate={4,5,8,7,3,2,1,9,6}, muchii disponibile: ().

Arbore parțial de cost minim: {(4,5), (4,8), (8,7), (4,3), (3,2), (2,1), (8,9), (3,6)}. Cost total: 1+3+2+5+2+1+6+11=31.

Muchiile alese in ordinea alegerii sunt: (4,5), (4,8), (8,7), (4,3), (3,2), (2,1), (8,9), (3,6). Costul total este: 1+3+2+5+2+1+6+11 = 31.

7. Corectitudinea Algoritmului de Arbore Parțial Minim (5p)

Analiză: Algoritmul propus adaugă muchii de cost minim care extind arborii. Un algoritm similar cu Prim.

Demonstrație Corectitudine:

Invariantă: La fiecare iterație, T este un arbore parțial al grafului.

Bază: La început, T conține toate nodurile și nicio muchie, deci este un arbore parțial.

Pasul inductiv: La fiecare iterație, se alege o muchie de cost minim e care leagă un nod din componenta conexă C care conține nodul curent i cu un nod care nu este în C.

Această muchie nu poate crea un ciclu deoarece adaugă un nod nou la arbore.

Această muchie este cea mai ieftină opțiune, ceea ce păstrează proprietatea că T este un arbore parțial de cost minim.

Adăugând muchia e, se formează o nouă componentă conexă, deci T rămâne un arbore (parțial).

Final: La final, arborele T va conecta toate nodurile grafului, și va fi de cost minim.

Algoritmul este corect, pentru că la fiecare pas extinde arborele cu muchia cea mai mică care leagă un nod din arbore cu un nod din afara arborelui.

8. Algoritmul Ford-Fulkerson (12.5p)

Analiză: Algoritmul Ford-Fulkerson caută drumuri de creștere a fluxului într-o rețea de transport.

Pași Edmonds-Karp (alegerea drumurilor de lungime minimă):

Graf Rezidual Inițial:

Capacități reziduale: c'(u,v) = c(u,v) - f(u,v) și c'(v,u) = f(u,v)

Sursa: 1, Destinația: 7

Pas 1:

Drum: 1 -> 2 -> 6 -> 7. Capacitate minimă: min(5, 8, 8) = 5.

Flux: 5. Actualizează fluxurile și graful rezidual.

f(1,2) = 5, c(1,2)=5, f(2,1)=0

f(2,6) = 5, c(2,6)=8, f(6,2)=0

f(6,7) = 5, c(6,7)=8, f(7,6)=0

Pas 2:

Drum: 1 -> 5 -> 3 -> 6 -> 7. Capacitate minimă: min(6, 6, 3, 3) = 3.

Flux: 3. Actualizează fluxurile și graful rezidual.

f(1,5) = 3, c(1,5)=6, f(5,1)=0

f(5,3) = 3, c(5,3)=6, f(3,5)=0

f(3,6) = 3, c(3,6)=3, f(6,3)=0

f(6,7) = 8, c(6,7)=8, f(7,6)=0

Pas 3:

Drum: 1 -> 5 -> 4 -> 2 -> 6 -> 7. Capacitate minimă: min(3, 3, 3, 3) = 3.

Flux: 3. Actualizează fluxurile și graful rezidual.

f(1,5) = 6, c(1,5)=6, f(5,1)=0

f(5,4) = 3, c(5,4)=0, f(4,5)=3

f(4,2) = 3, c(4,2)=3, f(2,4)=0

f(2,6) = 8, c(2,6)=8, f(6,2)=0

f(6,7) = 8, c(6,7)=8, f(7,6)=0

Pas 4:

Drum: 1 -> 5 -> 3 -> 7. Capacitate minimă: min(3,3)=3

Flux: 3. Actualizează fluxurile și graful rezidual.

f(1,5) = 6, c(1,5)=6, f(5,1)=0

f(5,3) = 6, c(5,3)=6, f(3,5)=0

f(3,7) = 3, c(3,7)=3, f(7,3)=0

Nu mai există drumuri de creștere.

Tăietură Minimă:

Vârfuri în S: {1, 2, 3, 4, 5, 6}.

Vârfuri în T: {7}.

Arce directe (S -> T): (3, 7), (6, 7).

Arce inverse (T -> S): None

Capacitatea tăieturii: capacitate(3,7)+ capacitate(6,7) = 3 + 8 = 11.

Justificare: Suma fluxurilor de pe muchiile care traversează tăietura este egală cu fluxul maxim. Algoritmul Ford-Fulkerson s-a oprit, nu mai există drumuri de creștere. Conform teoremei max-flow min-cut, fluxul maxim este egal cu capacitatea tăieturii minime.

Fluxul maxim este 5 (1-2-6-7) + 3(1-5-3-6-7) + 3 (1-5-4-2-6-7) + 3(1-5-3-7) = 14

Capacitatea tăieturii este: c(3,7)+c(6,7) = 3+8=11

Fluxul total este 11 deoarece nu mai exista niciun drum de creștere.


9 (a) Graf cu d(x) >= n/2 conex (5p):

Demonstrație: Presupunem prin absurd că graful G nu este conex. Atunci, există cel puțin două componente conexe C1 și C2. Fie x un nod din C1 și y un nod din C2.

Fie n1 = |C1| și n2 = |C2|. Atunci n1 + n2 = n.

Gradul maxim al lui x este n1-1, deoarece x se poate conecta doar cu nodurile din C1. Similar, gradul maxim al lui y este n2-1.

Din ipoteză, d(x) >= n/2 și d(y) >= n/2.

n1 - 1 >= n/2, adică n1 >= n/2 + 1. Similar, n2 >= n/2 + 1.

Atunci n = n1 + n2 >= n + 2, ceea ce este o contradicție.

Prin urmare, presupunerea inițială este falsă și graful trebuie să fie conex.

(b) Graf nehamiltonian cu două noduri neadiacente (5p):

Exemplu: Graful Petersen are n = 10 noduri. Este nehamiltonian. Fie două noduri neadiacente u și v. Gradul oricărui nod este 3. Deci, d(u) + d(v) = 3 + 3 = 6, iar 6 >= 10/2 = 5.

(c) Graf cu m >= C(n-1, 2) + 2 muchii (5p):

Teoremă (Dirac): Dacă un graf cu n noduri (n>=3) are d(x) >= n/2 pentru toate nodurile, atunci graful este hamiltonian.

Demonstrație: Dacă un graf are m >= C(n-1, 2) + 2 muchii, atunci există două noduri x și y astfel încât d(x) + d(y) >= n. Dacă cele două noduri sunt adiacente, atunci înlăturăm muchia dintre ele.

Dacă d(x) + d(y) > n, atunci G este hamiltonian conform teoremei lui Ore.

Dacă d(x) + d(y) = n, atunci x și y nu sunt adiacente. În acest caz, considerăm x, y și o muchie (x,a) și o muchie (y,b). Dacă b=x sau a=y, atunci ștergem muchia.

În acest caz, nu are cum să existe o tăietură care să separe x și y, deci graful este conex, iar conform lui Ore, graful este hamiltonian.

Observație: C(n-1,2)+1 este numărul maxim de muchii pe care le poate avea un graf neconex (un nod izolat și un graf complet cu n-1 noduri).

9. (c) (Continuare) Graf cu m >= C(n-1, 2) + 2 muchii (5p)

Concluzie (continuare): Dacă un graf are m >= C(n-1, 2) + 2 muchii, atunci G este conex (altfel ar avea cel mult C(n-1, 2) + 1 muchii). De asemenea, dacă m >= C(n-1, 2) + 2, atunci există două noduri x și y neadiacente astfel încât d(x) + d(y) >= n. Conform teoremei lui Ore, un graf este hamiltonian dacă pentru oricare două noduri neadiacente x și y, d(x) + d(y) >= n. Deci, graful G este hamiltonian.

10. Lungimea Maximă a unui Subșir Comun (LCS) (7.5p)

Analiză: Algoritmul LCS folosește programare dinamică pentru a găsi lungimea maximă a unui subșir comun a două cuvinte.

Algoritm:

Matrice: Se creează o matrice lcs[m+1][n+1] unde m și n sunt lungimile cuvintelor.

Inițializare: Prima linie și prima coloană a matricei sunt inițializate cu 0.

Umplere:

pentru i = 1 la m:
    pentru j = 1 la n:
        dacă cuvânt1[i-1] == cuvânt2[j-1]:
            lcs[i][j] = lcs[i-1][j-1] + 1
        altfel:
            lcs[i][j] = max(lcs[i-1][j], lcs[i][j-1])
Use code with caution.
Rezultat: lcs[m][n] este lungimea maximă a subșirului comun.

Exemplificare:

Cuvinte: "cerceta" și "retea"

Matricea lcs:

|   | r | e | t | e | a |
    -----------------------
  | 0 | 0 | 0 | 0 | 0 | 0 |
c | 0 | 0 | 0 | 0 | 0 | 0 |
e | 0 | 0 | 1 | 1 | 1 | 1 |
r | 0 | 1 | 1 | 1 | 1 | 1 |
c | 0 | 1 | 1 | 1 | 1 | 1 |
e | 0 | 1 | 2 | 2 | 2 | 2 |
t | 0 | 1 | 2 | 3 | 3 | 3 |
a | 0 | 1 | 2 | 3 | 3 | 4 |
Use code with caution.
Calcul:

lcs[1][1] = 0 (c != r)

lcs[2][2] = 1 (e == e)

lcs[3][1] = 1 (max(0,0)=0, dar lcs[2][1]=0 deci lcs[3][1]= max(0,1)=1 )

lcs[3][2] = 1 (max(1,1) = 1)

lcs[4][3] = 1 (max(1,1)=1, lcs[3][2]=1)

lcs[6][5] = 2 (max(2,2)=2)

lcs[7][3] = 3 (t == t)

lcs[8][5] = 4 (a == a)

Rezultat: Lungimea maximă a subșirului comun este 4. Un subșir este "retea".

11. Explorarea Minei cu Dinamită (15p)

Analiză: Problema este de a găsi un drum de cost minim (în termeni de dinamită) într-un graf orientat ponderat.

Algoritm (modificare Dijkstra):

Graf: Reprezentăm mina ca un graf orientat, unde camerele sunt noduri, tunelurile sunt muchii, și costul unei muchii este 0 (tunel) sau 1 (cameră prăbușită).

Inițializare:

dist[start_camera] = 0, dist[all_other_cameras] = infinit.

prev[all_cameras] = null (pentru a reconstrui drumul).

pq (coadă de prioritate, min-heap) = {(0, start_camera)}.

Iterație:

cât timp pq nu e goală:
    (cost_curent, camera_curenta) = extrage min(pq)
    dacă camera_curenta este camera_cristal:
       returnează dist[camera_curenta] și reconstruiește drumul din prev[]
    dacă cost_curent > dist[camera_curenta]:
       continuă
    pentru fiecare vecin al camerei_curente (vecin):
         cost_muchie = 0 dacă tunelul e neprabușit, 1 dacă e prăbușit
         dacă dist[camera_curenta] + cost_muchie < dist[vecin]:
               dist[vecin] = dist[camera_curenta] + cost_muchie
               prev[vecin] = camera_curenta
               adaugă (dist[vecin], vecin) în pq
returnează "nu există drum"
Use code with caution.
Reconstrucție Drum: Se merge invers de la destinație la sursă folosind prev[].

Complexitate:

Complexitate timp: O((|E| + |V|) log |V|), unde |V| este numărul de camere și |E| este numărul de tuneluri, deoarece folosim o coadă de prioritate (implementată ca heap).

Complexitate spațiu: O(|V|), pentru a stoca distanțele și predecesorii.

Justificare Optimizare: Modificarea lui Dijkstra este optimă pentru găsirea drumului de cost minim într-un graf ponderat. În acest caz, ponderile sunt 0 sau 1, ceea ce permite folosirea eficientă a cozi de prioritate.

Reconstrucția drumului: La finalul algoritmului, dacă un drum este găsit, folosim prev pentru a reconstrui calea: De la camera_cristal ne întoarcem recursiv prin prev până ajungem la start_camera.