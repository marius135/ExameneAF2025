Answer:

The maximum connected bipartite induced subgraph consists of nodes {1, 3, 4, 8, 9} with edges:

1-3, 3-4, 4-8, 8-9
Bipartition:

Set A (U): {1, 4, 9}
Set B (V): {3, 8}
Explanation:

This subgraph forms a path (1-3-4-8-9), which is a tree and inherently bipartite. All edges connect nodes between sets A and B, avoiding intra-set edges. Adding any other node introduces cycles or edges within the same set, violating bipartiteness.

Task 2: BFS from Node 4

BFS Tree:

Download Code
Copy Code
4 (level 0)  
├─3 (level 1)  
│ ├─1 (level 2)  
│ ├─2 (level 2)  
│ └─6 (level 2)  
├─5 (level 1)  
└─8 (level 1)  
  ├─9 (level 2)  
  └─7 (level 2)  
4 (level 0)  
├─3 (level 1)  
│ ├─1 (level 2)  
│ ├─2 (level 2)  
│ └─6 (level 2)  
├─5 (level 1)  
└─8 (level 1)  
  ├─9 (level 2)  
  └─7 (level 2)  
Distances from 4:

4: 0
3, 5, 8: 1
1, 2, 6, 9, 7: 2
Explanation:

BFS explores neighbors in lexicographical order. Node 4 visits 3, 5, and 8 first. Their neighbors (1, 2, 6, 9, 7) are added at level 2. Node 6 is reachable via 3→6.

Task 3: Eulerian Path

Initial Graph Check:

Odd-degree nodes: 2, 3, 4, 8 (four nodes).
Eulerian path condition: Requires exactly 0 or 2 odd-degree nodes.
Modification:

Remove edge 3-4 to reduce odd-degree nodes to 2 (nodes 2 and 8).

Eulerian Path in Modified Graph:

Example:

2 → 1 → 3 → 6 → 2 → 3 → 5 → 4 → 8 → 9 → 7 → 8 → 4

Necessary & Sufficient Condition:

An undirected graph has an Eulerian path iff it is connected and has exactly 0 or 2 vertices of odd degree.

Task 4: Critical Nodes (Articulation Points)

Algorithm:

Use Tarjan’s DFS-based algorithm to track discovery times and low values. A node is critical if:

It is the root with ≥2 children.
It is non-root and has a child where the child’s low value ≥ the node’s discovery time.
Critical Nodes in Graph_1_6:

3 (connects {1, 2, 6} to {4, 5, 8, 9, 7})
4 (connects {3, 5} to {8, 9, 7})
8 (connects {4, 9} to {7})
Task 5: Floyd-Warshall Algorithm

Steps for j=1, 2, 3:

j=1 (Node 1): No updates (no outgoing edges).
j=2 (Node 2): Update paths through 2 (e.g., 1→2→3: cost 1+2=3 replaces 1→3=4).
j=3 (Node 3): Update paths through 3 (e.g., 2→3→4: cost 2+5=7 replaces 2→4=∞).
Matrix Updates:

j=2: D[1][3] = 3, D[1][6] = 11.
j=3: D[2][4] = 7, D[1][4] = 9.
Task 6: Prim's Algorithm from Node 4

Steps:

Start at 4. Add edges: 3 (5), 5 (1), 8 (3).
Choose 4-5 (1).
Add 4-8 (3).
From 8, add 8-7 (2) and 8-9 (6).
Continue until all nodes are included.
MST Edges:

4-5 (1), 4-8 (3), 8-7 (2), 7-9 (5), 5-3 (12), 3-1 (4), 3-2 (2), 2-6 (10).

Task 7: MST Algorithm Correctness

Answer:

The algorithm is incorrect. It may fail to select global minimum edges, leading to suboptimal or disconnected trees. For example, choosing edges per vertex ignores components formed later, violating the greedy property of Prim/Kruskal.

Task 8: Ford-Fulkerson (Edmonds-Karp)

Steps:

Augmenting Paths:
1→5→3→7 (min capacity 6).
1→2→6→7 (min capacity 8).
Residual Graph Updates: Adjust flows iteratively.
Min Cut (S-T):

S: {1, 5, 3, 4}
T: {2, 6, 7}
Capacity: 5 (1→2) + 6 (5→4) + 7 (3→7) = 18.
Task 9: Graph Theory

a. Proof of Connectivity:

Assume a disconnected graph with two components. Each component has ≤ n/2 nodes, contradicting δ ≥ n/2. Hence, connected.

b. Non-Hamiltonian Example:

Two disjoint K₃ graphs connected by a single edge. Two non-adjacent nodes (one from each K₃) have degree sum ≥ n, but no Hamiltonian cycle exists.

c. Hamiltonian Condition:

If m ≥ C(n-1, 2) + 2, the graph is dense enough to satisfy Ore’s theorem (degree sum ≥ n for non-adjacent nodes), ensuring it is Hamiltonian.

Task 10: Longest Common Subsequence (LCS)

Algorithm:

Matrix Definition: dp[i][j] = LCS length of first i and j characters.
Recurrence:
If X[i] = Y[j]: dp[i][j] = dp[i-1][j-1] + 1.
Else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]).
Example (cerceta vs retea):

LCS: "retea" (length 5).
Matrix: Highlighted values show matches and backtracking.
Task 11: Optimal Path with Minimal Dynamite

Algorithm:

Modeling: Assign weight 1 to chambers requiring dynamite, 0 otherwise.
Shortest Path: Use Dijkstra’s algorithm with a priority queue to minimize total dynamite.
Complexity: O(m + n log n) using adjacency lists and a heap.
Example:

Path: 1 → 5 → 3 → 7 (dynamite used at chambers 5 and 3).
Output: Path with minimal total weight (dynamite count).