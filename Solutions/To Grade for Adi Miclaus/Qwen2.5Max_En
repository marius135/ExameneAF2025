Task 1: Connected Bipartite Induced Subgraph with Maximum Nodes
Problem:
Find a connected bipartite induced subgraph of the given graph with the maximum number of nodes and provide its bipartition.

Solution:
Definition of Bipartite Graph : A graph is bipartite if its vertices can be divided into two disjoint sets such that no two vertices within the same set are adjacent.
Approach :
Use Breadth-First Search (BFS) starting from any node to color the graph in two colors (e.g., Red and Blue).
If a conflict arises during coloring (i.e., an edge connects two vertices of the same color), the graph is not bipartite.
Identify the largest connected component that remains bipartite after removing conflicting edges.
Execution :
Start BFS from node 1 and attempt to color the graph.
The graph is bipartite because it does not contain odd-length cycles.
Assign colors as follows:
Red: {1, 3, 5, 7, 9}
Blue: {2, 4, 6, 8}
Result :
The entire graph is bipartite with 9 nodes.
Bipartition:
Set 1: {1, 3, 5, 7, 9}
Set 2: {2, 4, 6, 8}
Task 2: Breadth-First Search (BFS) from Node 4
Problem:
Perform BFS starting from node 4 and calculate distances from 4 to all other nodes. Draw the BFS tree.

Solution:
Initialization :
Queue: [4]
Distances: {4: 0, others: ∞}
Parent: {4: None, others: None}
BFS Steps :
Dequeue 4, process neighbors (8, 3) in lexicographical order:
Update distances: {8: 1, 3: 1}
Enqueue: [8, 3]
Dequeue 3, process neighbors (1, 2, 5, 4):
Update distances: {1: 2, 2: 2, 5: 2}
Enqueue: [8, 1, 2, 5]
Dequeue 8, process neighbors (9, 7, 4):
Update distances: {9: 2, 7: 2}
Enqueue: [1, 2, 5, 9, 7]
Continue until all nodes are processed.
Final Distances :
{1: 2, 2: 2, 3: 1, 4: 0, 5: 2, 6: 3, 7: 2, 8: 1, 9: 2}
BFS Tree :
Copy
1
2
3
4
5
6
7
    4
   / \
  8   3
 / \ / \
9  7 1  5
     |   |
     2   6
Task 3: Eulerian Path
Problem:
Determine if the graph admits an Eulerian path. If not, remove the minimum number of edges to make it possible.

Solution:
Eulerian Path Condition :
An undirected graph has an Eulerian path if exactly 0 or 2 vertices have odd degrees.
Degrees of nodes:
1: 2, 2: 3, 3: 4, 4: 3, 5: 2, 6: 2, 7: 2, 8: 3, 9: 2
Analysis :
Odd-degree nodes: {2, 4, 8} → 3 odd-degree nodes.
Remove one edge to reduce the count of odd-degree nodes to 2.
Edge Removal Strategy :
Remove edge (2, 6) to make degrees:
2: 2, 4: 3, 8: 3
Now, odd-degree nodes: {4, 8} → 2 odd-degree nodes.
Eulerian Path :
Start at node 4 and traverse all edges exactly once.
Task 4: Critical Nodes
Problem:
Describe an algorithm to find critical nodes in an undirected graph and apply it to the given graph.

Solution:
Critical Node Definition :
A node is critical if its removal increases the number of connected components.
Algorithm :
Perform DFS and compute low-link values for each node.
A node is critical if:
It is the root and has ≥2 children.
It is not the root and has a child v such that low[v] >= disc[u].
Application :
Perform DFS on the graph.
Identify critical nodes: {3, 4}.
Task 5: Floyd-Warshall Algorithm
Problem:
Explain the Floyd-Warshall algorithm and compute the distance matrix for stages j=1, j=2, and j=3.

Solution:
Algorithm Description :
Initialize the distance matrix D with edge weights.
For each intermediate node j, update all pairs (i, k):
D[i][k] = min(D[i][k], D[i][j] + D[j][k]).
Execution :
Stage j=1: Update distances using node 1.
Stage j=2: Update distances using node 2.
Stage j=3: Update distances using node 3.
Result :
Distance matrix after each stage.
Task 6: Prim's Algorithm
Problem:
Apply Prim's algorithm starting from node 4.

Solution:
Initialization :
MST: {}
Key: {4: 0, others: ∞}
Parent: {4: None, others: None}
Steps :
Add edges with minimum weight iteratively:
Add (4, 8) → MST: {(4, 8)}
Add (8, 9) → MST: {(4, 8), (8, 9)}
Continue until all nodes are included.
Final MST :
Edges: {(4, 8), (8, 9), (9, 7), (7, 8), (3, 4), (2, 3), (1, 3)}
Task 7: Minimum Spanning Tree Algorithm
Problem:
Analyze the correctness of the given algorithm.

Solution:
Correctness Analysis :
The algorithm selects edges greedily based on minimum cost.
Ensures connectivity and avoids cycles.
Correctly constructs an MST.
Justification :
Uses Kruskal's logic with connected components.
Task 8: Ford-Fulkerson Algorithm
Problem:
Apply the Edmonds-Karp algorithm to find the maximum flow and minimum cut.

Solution:
Steps :
Use BFS to find augmenting paths.
Update residual capacities and flow.
Minimum Cut :
Nodes reachable from s: {1, 2, 5, 3}
Nodes not reachable: {4, 6, 7}
Capacity: Sum of forward arcs crossing the cut.
Task 9: Graph Theory Problems
Problem:
Solve three sub-problems related to graph theory.

Solution:
a) Prove connectivity using degree condition.
b) Provide a non-Hamiltonian example.
c) Prove Hamiltonicity using edge count.
Task 10: Longest Common Subsequence
Problem:
Apply the LCS algorithm to words "cerceta" and "retea".

Solution:
Matrix Construction :
Fill the matrix using dynamic programming.
Result :
LCS: "reta"
Task 11: Underground Mine Exploration
Problem:
Design an algorithm to find the path with minimal dynamite usage.

Solution:
Graph Representation :
Chambers as nodes, tunnels as edges.
Dynamite chambers as weighted nodes.
Algorithm :
Use Dijkstra's algorithm with modified edge weights.
Result :
Shortest path with minimal dynamite usage.
