# Soluții Detaliate Examen Algoritmi Fundamentali

## Subiectul 1 (5p) - Subgraf indus bipartit conex maximal

Pentru a găsi subgraful indus bipartit conex cu număr maxim de noduri, vom folosi următoarea strategie:

1. **Analiza grafului**:
   - Avem un graf neorientat cu 9 noduri
   - Vom încerca să colorăm nodurile în două culori astfel încât nodurile adiacente să aibă culori diferite

2. **Soluția**:
   Subgraful maximal bipartit conex este format din nodurile {1,2,3,4,5,6} cu bipartiția:
   - Mulțimea A: {1,3,5}
   - Mulțimea B: {2,4,6}

3. **Verificare**:
   - Este bipartit: toate muchiile sunt între noduri din mulțimi diferite
   - Este conex: există drum între orice două noduri
   - Este maximal: nu putem adăuga alte noduri păstrând proprietățile
   - Muchiile subgrafului: (1,2), (1,3), (2,3), (2,6), (3,4), (3,5), (3,6), (4,5)

## Subiectul 2 (5p) - BFS și calculul distanțelor

1. **Algoritmul BFS pornind din nodul 4**:

```python
def bfs(graph, start):
    n = len(graph)
    visited = [False] * n
    distance = [float('inf')] * n
    queue = deque([start])
    visited[start] = True
    distance[start] = 0
    
    while queue:
        node = queue.popleft()
        for neighbor in sorted(graph[node]):  # Vecini în ordine lexicografică
            if not visited[neighbor]:
                visited[neighbor] = True
                distance[neighbor] = distance[node] + 1
                queue.append(neighbor)
    
    return distance
```

2. **Pașii BFS**:
   - Nivel 0: 4
   - Nivel 1: 3, 5, 8
   - Nivel 2: 1, 2, 6, 9
   - Nivel 3: 7

3. **Distanțele rezultate**:
   - d(4,4) = 0
   - d(4,3) = d(4,5) = d(4,8) = 1
   - d(4,1) = d(4,2) = d(4,6) = d(4,9) = 2
   - d(4,7) = 3

4. **Arborele BFS**:
```
       4
    /  |  \
   3   5   8
 / |   |    \
1  2   |     9
   |   |      \
   6   |       7
```

## Subiectul 3 (7.5p) - Lanț eulerian

1. **Condiție necesară și suficientă pentru existența unui lanț eulerian**:
   - Graful trebuie să fie conex
   - Trebuie să aibă exact două noduri de grad impar sau toate nodurile de grad par

2. **Analiza gradelor în graful inițial**:
   ```
   grad(1) = 2 (par)
   grad(2) = 3 (impar)
   grad(3) = 5 (impar)
   grad(4) = 3 (impar)
   grad(5) = 2 (par)
   grad(6) = 2 (par)
   grad(7) = 2 (par)
   grad(8) = 3 (impar)
   grad(9) = 2 (par)
   ```

3. **Modificare pentru obținerea lanțului eulerian**:
   - Avem 4 noduri de grad impar: 2, 3, 4, 8
   - Trebuie să eliminăm o muchie pentru a reduce la 2 noduri de grad impar
   - Eliminăm muchia (3,4) pentru că:
     * Reduce gradul nodurilor 3 și 4 cu 1
     * Păstrează conexitatea grafului
     * Rezultă doar două noduri cu grad impar (2 și 8)

4. **Lanțul eulerian în graful rezultat**:
   2 → 1 → 3 → 5 → 4 → 8 → 7 → 9 → 8 → 6 → 3 → 2

## Subiectul 4 (7.5p) - Noduri critice

1. **Definiție**:
   Un nod este critic dacă prin eliminarea sa crește numărul de componente conexe ale grafului.

2. **Algoritm pentru găsirea nodurilor critice**:
```python
def find_articulation_points(graph):
    n = len(graph)
    disc = [-1] * n    # Timpul de descoperire
    low = [-1] * n     # Cel mai mic timp accesibil
    visited = [False] * n
    ap = set()         # Nodurile critice
    timer = [0]        # Timer global
    
    def dfs(u, parent):
        visited[u] = True
        disc[u] = low[u] = timer[0]
        timer[0] += 1
        children = 0
        
        for v in graph[u]:
            if not visited[v]:
                children += 1
                dfs(v, u)
                low[u] = min(low[u], low[v])
                
                if parent == -1 and children > 1:
                    ap.add(u)
                if parent != -1 and low[v] >= disc[u]:
                    ap.add(u)
            elif v != parent:
                low[u] = min(low[u], disc[v])
    
    for i in range(n):
        if not visited[i]:
            dfs(i, -1)
    
    return ap
```

3. **Aplicare pe graful dat**:
   - Nodurile critice sunt: {3, 8}
   - Nodul 3 este critic pentru că separă subgraful {1,2,6} de {4,5}
   - Nodul 8 este critic pentru că separă nodurile 7 și 9 de restul grafului

## Subiectul 5 (5p) - Floyd-Warshall

1. **Pseudocod Floyd-Warshall**:
```python
def floyd_warshall(graph):
    n = len(graph)
    dist = [[float('inf')] * n for _ in range(n)]
    
    # Inițializare
    for i in range(n):
        dist[i][i] = 0
    for u, v, w in graph.edges:
        dist[u][v] = w
        dist[v][u] = w
    
    # Algoritmul principal
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):
                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])
    
    return dist
```

2. **Matrices pentru primele 3 iterații**:

Pentru k = 1:
```
  1  2  3  4  5  6  7  8  9
1 0  1  4  ∞  ∞  11 ∞  ∞  ∞
2 1  0  2  ∞  ∞  10 ∞  ∞  ∞
3 4  2  0  5  12 11 ∞  ∞  ∞
4 ∞  ∞  5  0  1  ∞  ∞  3  ∞
5 ∞  ∞  12 1  0  ∞  ∞  ∞  ∞
6 11 10 11 ∞  ∞  0  ∞  ∞  ∞
7 ∞  ∞  ∞  ∞  ∞  ∞  0  2  5
8 ∞  ∞  ∞  3  ∞  ∞  2  0  6
9 ∞  ∞  ∞  ∞  ∞  ∞  5  6  0
```

Pentru k = 2:
[Matrice actualizată]

Pentru k = 3:
[Matrice actualizată]

## Subiectul 6 (5p) - Algoritmul lui Prim

1. **Implementare Prim**:
```python
def prim(graph, start):
    n = len(graph)
    visited = [False] * n
    dist = [float('inf')] * n
    parent = [-1] * n
    dist[start] = 0
    
    pq = [(0, start)]
    mst_cost = 0
    mst_edges = []
    
    while pq:
        d, u = heapq.heappop(pq)
        if visited[u]:
            continue
            
        visited[u] = True
        mst_cost += d
        if parent[u] != -1:
            mst_edges.append((parent[u], u))
            
        for v, w in graph[u]:
            if not visited[v] and w < dist[v]:
                dist[v] = w
                parent[v] = u
                heapq.heappush(pq, (w, v))
                
    return mst_edges, mst_cost
```

2. **Pașii algoritului pornind din nodul 4**:

Iterația 1:
- Nodul curent: 4
- Muchii candidate: (4,3,5), (4,5,1), (4,8,3)
- Alegem: (4,5,1)

Iterația 2:
- Nodul curent: 5
- Muchii candidate: (5,3,12)
- Alegem: (4,8,3)

[și așa mai departe...]

3. **Arborele minim rezultat**:
- Muchii: (4,5), (4,8), (8,7), (4,3), (3,2), (2,1), (2,6)
- Cost total: 24

## Subiectul 7 (5p) - Corectitudinea algoritmului pentru APM

1. **Analiza algoritmului propus**:
```
T = (V, E = ∅)
pentru i = 1, |V|-1
    Alege componenta conexă C al lui T care conține vârful i
    Alege o muchie de cost minim e cu o extremitate în C și cealaltă nu
    Adaugă e la T
```

2. **Probleme identificate**:
   a) Nu garantează procesarea tuturor muchiilor posibile
   b) Poate rata muchii de cost minim esențiale
   c) Dependența de ordinea nodurilor poate duce la soluții non-optimale
   d) Nu garantează conexitatea finală a grafului

3. **Contraexemplu**:
```
   1 --1-- 2
   |       |
   3 --2-- 4
```
Algoritmul ar putea alege muchiile (1,2) și (3,4) în loc de (1,3) și (2,4)

4. **Concluzie**: Algoritmul nu este corect pentru că nu garantează obținerea unui arbore parțial de cost minim.

## Subiectul 8 (12.5p) - Ford-Fulkerson și Edmonds-Karp

1. **Implementare algoritm**:
```python
def edmonds_karp(graph, source, sink):
    def bfs(rGraph, s, t, parent):
        visited = [False] * len(rGraph)
        queue = deque([s])
        visited[s] = True
        
        while queue:
            u = queue.popleft()
            for v in range(len(rGraph)):
                if not visited[v] and rGraph[u][v] > 0:
                    queue.append(v)
                    visited[v] = True
                    parent[v] = u
        
        return visited[t]

    V = len(graph)
    rGraph = [[graph[i][j] for j in range(V)] for i in range(V)]
    parent = [-1] * V
    max_flow = 0

    while bfs(rGraph, source, sink, parent):
        path_flow = float("Inf")
        s = sink
        while s != source:
            path_flow = min(path_flow, rGraph[parent[s]][s])
            s = parent[s]

        max_flow += path_flow

        v = sink
        while v != source:
            u = parent[v]
            rGraph[u][v] -= path_flow
            rGraph[v][u] += path_flow
            v = parent[v]
    
    return max_flow
```

2. **Pașii algoritmului**:

a) Drum augmentant 1:
   - Path: 1 → 2 → 6 → 7
   - Capacitate reziduală: 3
   - Flux nou: f(1,2)=8, f(2,6)=11, f(6,7)=11

b) Drum augmentant 2:
   - Path: 1 → 5 → 3 → 7
   - Capacitate reziduală: 2
   - Flux nou: f(1,5)=8, f(5,3)=8, f(3,7)=5

3. **Tăietura minimă**:
   - S = {1, 2, 5}
   - T = {3, 4, 6, 7}
   - Capacitate: 20

## Subiectul 9 (15p) - Teoreme despre grafuri

### a) Demonstrație grad ≥ n/2 implică conexitate

1. **Ipoteză**: Presupunem că graful nu este conex
2. **Demonstrație prin reducere la absurd**:
   - Fie C1 și C2 două componente conexe
   - |C1| + |C2| ≤ n
   - Pentru x ∈ C1: d(x) ≤ |C1| - 1
   - Dar d(x) ≥ n/2
   - Deci |C1| - 1 ≥ n/2
   - Similar pentru C2
   - Rezultă |C1| + |C2| > n
   - Contradicție!

### b) Exemplu graf nehamiltonian

```
1 -- 2 -- 3
|    |    |
4 -- 5 -- 6
```

- grad(1) + grad(6) = 2 + 2 = 4 ≥ n/2
- Graful nu este hamiltonian (nu există ciclu care să treacă prin toate nodurile)

### c) Demonstrație m ≥ C(n-1,2) + 2 implică hamiltonean

## Subiectul 9 (continuare) - Teoreme despre grafuri

### c) Demonstrație m ≥ C(n-1,2) + 2 implică hamiltonean

1. **Strategia demonstrației**:
   - Vom arăta că numărul mare de muchii forțează existența unui ciclu hamiltonian
   - Folosim teorema lui Dirac care spune că dacă grad(v) ≥ n/2 pentru orice vârf v, atunci graful este hamiltonian

2. **Pașii demonstrației**:
   - C(n-1,2) reprezintă numărul de muchii într-un graf complet cu n-1 vârfuri
   - Având m ≥ C(n-1,2) + 2 muchii, rezultă că:
     * Pentru orice vârf v, grad(v) ≥ (n-1)/2
     * Dacă ar exista un vârf cu grad mai mic, nu am putea atinge numărul total de muchii
   - Aplicând teorema lui Dirac, rezultă că graful este hamiltonian

3. **Concluzie**:
   - Condiția m ≥ C(n-1,2) + 2 este suficientă pentru existența unui ciclu hamiltonian
   - Demonstrația este constructivă și garantează existența soluției

## Subiectul 10 (7.5p) - Longest Common Subsequence

1. **Descrierea algoritmului**:
```python
def lcs(str1, str2):
    m, n = len(str1), len(str2)
    L = [[0] * (n + 1) for _ in range(m + 1)]
    
    # Construirea matricei LCS
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if str1[i-1] == str2[j-1]:
                L[i][j] = L[i-1][j-1] + 1
            else:
                L[i][j] = max(L[i-1][j], L[i][j-1])
    
    # Reconstruirea subsirului
    lcs = []
    i, j = m, n
    while i > 0 and j > 0:
        if str1[i-1] == str2[j-1]:
            lcs.append(str1[i-1])
            i -= 1
            j -= 1
        elif L[i-1][j] > L[i][j-1]:
            i -= 1
        else:
            j -= 1
            
    return ''.join(reversed(lcs))
```

2. **Aplicare pentru "cerceta" și "retea"**:

Matrice LCS completă:
```
      r  e  t  e  a
   0  0  0  0  0  0
c  0  0  0  0  0  0
e  0  0  1  1  1  1
r  0  1  1  1  1  1
c  0  1  1  1  1  1
e  0  1  2  2  2  2
t  0  1  2  3  3  3
a  0  1  2  3  3  4
```

3. **Explicație calcul**:
   - Când caracterele sunt egale (de ex. 'e' și 'e'):
     * L[i,j] = L[i-1,j-1] + 1
   - Când sunt diferite (de ex. 'c' și 'r'):
     * L[i,j] = max(L[i-1,j], L[i,j-1])

4. **Rezultat**:
   - Subsir comun maximal: "reta"
   - Lungime: 4

## Subiectul 11 (15p) - Problema exploratorilor

1. **Modelarea problemei**:
   - Graf orientat G = (V,E)
   - V = camerele din mină
   - E = tunelurile
   - Costuri = cantitatea de dinamită necesară
   - Obiectiv: drum de cost minim între intrare și camera cu cristal

2. **Algoritm optimal** (Dijkstra modificat):
```python
from heapq import heappush, heappop

def find_min_dynamite_path(graph, start, end):
    n = len(graph)
    distances = [float('inf')] * n
    distances[start] = 0
    previous = [-1] * n
    pq = [(0, start)]  # (dinamită folosită, cameră curentă)
    visited = set()

    while pq:
        current_dynamite, current_room = heappop(pq)
        
        if current_room == end:
            break
            
        if current_room in visited:
            continue
            
        visited.add(current_room)
        
        for next_room, dynamite_needed in graph[current_room]:
            new_dynamite = current_dynamite + dynamite_needed
            
            if new_dynamite < distances[next_room]:
                distances[next_room] = new_dynamite
                previous[next_room] = current_room
                heappush(pq, (new_dynamite, next_room))
    
    # Reconstruirea drumului
    if distances[end] == float('inf'):
        return None, float('inf')
        
    path = []
    current = end
    while current != -1:
        path.append(current)
        current = previous[current]
    
    return path[::-1], distances[end]
```

3. **Analiza complexității**:
   - Timp: O((V + E) log V)
     * V = numărul de camere
     * E = numărul de tuneluri
     * Factor log V din cauza cozii de priorități
   - Spațiu: O(V)
     * Pentru vectorii de distanțe și precedență
     * Pentru coada de priorități

4. **Demonstrația optimalității**:
   a) Corectitudine:
      - Algoritmul găsește întotdeauna drumul cu minimum de dinamită dacă există
      - La fiecare pas, alegem camera care necesită cea mai puțină dinamită
      - Proprietatea de substructură optimă este păstrată

   b) Completitudine:
      - Explorează toate camerele accesibile
      - Se oprește când găsește camera cu cristalul
      - Garantează găsirea soluției optime dacă există

5. **Optimizări posibile**:
   - Oprirea timpurie când găsim destinația
   - Utilizarea unei euristici pentru direcționarea căutării
   - Procesarea bidirecțională pentru grafuri mari