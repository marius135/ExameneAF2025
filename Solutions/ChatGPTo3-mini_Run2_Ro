Iată rezolvarea detaliată a fiecărei cerinţe din examen:

---

## 1. Subgraf indus bipartit conex de număr maxim de noduri

**Observaţii preliminare:**
- Avem graful neorientat cu 9 noduri şi muchii:
  - Triunghiul {1, 2, 3} (muchiile 1–2, 1–3, 2–3),
  - Triunghiul {3, 4, 5} (muchiile 3–4, 3–5, 4–5),
  - Triunghiul {7, 8, 9} (muchiile 7–8, 7–9, 8–9).
- Pentru a obţine un subgraf indus bipartit trebuie să “spargem” ciclurile impare.  
- Observăm că triunghiul {1,2,3} şi cel {3,4,5} au nodul comun 3, deci prin eliminarea unui singur nod din această zonă am putea elimina ambele cicluri impare. Dar trebuie şi să menţinem conexitatea.

**Strategie de eliminare:**
- Dacă eliminăm nodul **3** vom distruge atât triunghiul {1,2,3} cât şi {3,4,5}.  
  Dar conexitatea se pierde, deoarece nodul 3 era punte între subgraful format din {1,2,6} şi cel din {4,5,7,8,9}.
- O soluţie este să „renunţăm” la nodurile care provoacă ciclul impar fără a deconecta componentele.  
  În zona {1,2,3,4,5,6} conexiunea se poate păstra dacă renunţăm la **5** (deci ciclul {3,4,5} se descompune) sau la **2**.  
  Totuşi, alegând eliminarea lui 5, verificăm:
  - Subgraful indus pe nodurile **{1,3,4,6,7,8,9}** totuşi mai conţine triunghiul {7,8,9} – deci trebuie “rezolvată” şi această zonă.
- În zona {7,8,9}, deoarece **8** este nod de legătură către restul grafului, e mai bine să eliminăm unul dintre ceilalţi (de exemplu, **7** sau **9**) pentru a sparge ciclul, fără a izola legătura către componenta principală.

**O soluţie optimă:**
Se poate obţine un subgraf indus de 6 noduri:  
Să considerăm subgraful indus de nodurile **{1,3,4,6,8,9}**.

- **Verificare bipartit:**  
  Să atribuim culorile astfel:
  - Atribuim „roşu” nodul 1.
  - Din 1 avem muchia 1–3 ⇒ 3 primeşte „albastru”.
  - Din 3, vecinii săi (4 şi 6) vor fi „roşii” (deoarece 3 este albastru).
  - Din 4, există muchia 4–8 ⇒ 8 devine „albastru”.
  - Din 8, muchia 8–9 ⇒ 9 devine „roşu”.
  
  Obţinem bipartiţia:  
  - **Setul A (roşu):** {1,4,6,9}  
  - **Setul B (albastru):** {3,8}
  
- **Conexitate:**  
  Se verifică că, în graful indus pe {1,3,4,6,8,9}, există drumuri între orice două noduri (de exemplu, 1–3–4–8–9 şi 3–6 etc.).

**Concluzie:**  
Un subgraf indus bipartit conex cu număr maxim de noduri este cel cu nodurile  
**{1, 3, 4, 6, 8, 9}**  
și o posibilă bipartiţie este:  
- A = {1, 4, 6, 9}  
- B = {3, 8}.

---

## 2. Parcurgerea în lăţime (BFS) pornind din nodul 4 (graful 1–6)

**Pas cu pas:**

1. **Iniţial:**  
   - Se porneşte de la nodul 4 (nivelul 0).  
   - Se marchează 4 cu distanţa 0 şi se adaugă în coadă.

2. **Nivelul 1:**  
   - Din 4, vecinii (conform ordinii lexicografice) sunt: 3, 5 şi 8.  
   - Se atribuie:  
     • d(3) = 1, d(5) = 1, d(8) = 1  
   - Se adaugă 3, 5 şi 8 în coadă.

3. **Nivelul 2:**  
   - Se extrage din coadă nodul 3:  
     Din 3, vecinii sunt: 1, 2, 4, 5, 6.  
     Dar 4 şi 5 sunt deja vizitate, deci se adaugă 1, 2 şi 6 (d = 2).  
   - Se extrage apoi nodul 5: toţi vecinii sunt deja vizitaţi.  
   - Se extrage nodul 8:  
     Din 8, vecinii sunt: 4, 7 şi 9.  
     4 este vizitat; se adaugă 7 şi 9 (d = 2).

4. **Ordinea finală și arborele BFS:**  
   - **Nivel 0:** 4  
   - **Nivel 1:** 3, 5, 8  
   - **Nivel 2:** 1, 2, 6, 7, 9  

   Arborele BFS include muchiile:  
   - 4–3, 4–5, 4–8  
   - 3–1, 3–2, 3–6  
   - 8–7, 8–9

**Utilizare pentru calcularea distanţelor:**  
Distanţa de la 4 la oricare alt nod este egală cu nivelul în care apare nodul (ex.: d(1) = 2, d(7) = 2 etc.).

---

## 3. Lanţ eulerian în graful 1–6

**Pasul 1. Verificarea condiţiei:**

Un graf neorientat admite un lanţ (traseu) eulerian dacă și numai dacă este conex şi are **exact 0 sau 2 noduri de grad impar**.

- Calculăm gradele:
  - d(1) = 2  
  - d(2) = 3  
  - d(3) = 5  
  - d(4) = 3  
  - d(5) = 2  
  - d(6) = 2  
  - d(7) = 2  
  - d(8) = 3  
  - d(9) = 2

- Nodurile de grad impar: 2, 3, 4, 8 (4 noduri).

Deci, **graful iniţial nu admit lanţ eulerian.**

**Pasul 2. Eliminarea unui număr minim de muchii:**

Dorim să obţinem un graf ce are exact 0 sau 2 noduri de grad impar și care rămâne conex.

- Observăm că prin eliminarea muchiei **3–4**:
  - Gradul lui 3 scade de la 5 la 4 (par),  
  - Gradul lui 4 scade de la 3 la 2 (par).  
- Rămân nodurile impare: 2 şi 8 (două noduri).

Verificăm că eliminarea muchiei 3–4 nu deconectează graful:
- Legăturile dintre celelalte noduri se păstrează (de exemplu, 3 este tot conectat prin 1–3, 2–3, 3–5; iar 4 este conectat prin 5–4 şi 4–8).

**Pasul 3. Exemplu de lanţ eulerian în graful obţinut:**

Avem graful modificat (fără muchia 3–4) cu muchiile:
- 1–2, 1–3, 2–3, 2–6, 3–5, 3–6, 5–4, 4–8, 7–8, 8–9, 9–7.

Având 2 noduri de grad impar (2 şi 8), un lanţ eulerian începe la unul şi se termină la celălalt.

Un exemplu de lanţ eulerian (folosind algoritmul lui Hierholzer):
```
2 → 3 → 6 → 2 → 1 → 3 → 5 → 4 → 8 → 9 → 7 → 8
```
*(În această succesiune, fiecare muchie este parcursă o singură dată.)*

**Condiţie necesară și suficientă:**  
Un graf neorientat are lanţ eulerian dacă și numai dacă este conex și are exact 0 sau 2 noduri de grad impar.

---

## 4. Determinarea nodurilor critice (articulaţii)

**Algoritmul clasic (bazat pe DFS – algoritmul lui Tarjan):**

1. Se parcurge graful prin DFS, atribuindu-se fiecărui nod:
   - **disc[u]**: timpul de descoperire al nodului u,
   - **low[u]**: cel mai mic timp de descoperire accesibil din subarborele lui u (prin muchii directe sau muchii de întoarcere).

2. Un nod u (cu părinte în DFS) este **articulaţie** dacă există cel puţin un fiu v astfel încât  
   **low[v] ≥ disc[u]**.  
   Pentru nodul rădăcină, acesta este articulaţie dacă are cel puţin 2 copii în arborele DFS.

**Aplicare pe graful 1–6:**

Folosind parcurgerea (în ordine lexicografică a vecinilor) şi atribuind timpi de descoperire, se obţine (exemplificativ):
- Pornind din 1, se vizitează 2, apoi 3, continuând în adâncime.
- Se calculează valorile low şi se observă:
  - Nodul **2**: are copilul 3 cu low[3] = disc[2] ⇒ 2 este articulaţie.
  - Nodul **3**: cu fiul 4 (de unde se obţin şi alte subramuri) ⇒ 3 este articulaţie.
  - Nodul **4**: din care 8 se leagă (şi prin 8 se obţine ciclul {7,8,9}) ⇒ 4 este articulaţie.
  - Nodul **8**: este punte către componenta formată de {7,9} ⇒ 8 este articulaţie.

**Concluzie:**  
Nodurile critice (articulațiile) sunt **2, 3, 4 şi 8**.

---

## 5. Algoritmul Floyd–Warshall (exemplificat pe graful 1–6)

**Descriere generală:**  
Se iniţializează matricea de distanţe **D** astfel:
- D[i][j] = w(i,j) dacă există muchie directă,
- D[i][i] = 0,
- D[i][j] = ∞ dacă nu există muchie.

Apoi se execută trei bucle:
```
pentru k de la 1 la n:
   pentru i de la 1 la n:
      pentru j de la 1 la n:
         D[i][j] = min{ D[i][j], D[i][k] + D[k][j] }
```

**Pentru graful din exemplu:**  
Nodurile sunt 1,2,...,9. Din lista de muchii avem, de exemplu:
- D[1][2] = 1, D[1][3] = 4,  
- D[2][3] = 2, D[2][6] = 10,  
- D[3][4] = 5, D[3][5] = 12, D[3][6] = 11,  
- D[4][5] = 1, D[4][8] = 3,  
- D[7][8] = 2, D[8][9] = 6, D[9][7] = 5,  
și simetric.

**Etapele:**

- **La k = 1 (intermediar = nodul 1):**  
  Se vor verifica că pentru orice pereche (i,j), o cale prin 1 nu reduce distanţa faţă de valoarea curentă.  
  *Observaţie:* Din 1 se porneşte doar spre 2 şi 3, iar costurile deja existente sunt cele minime.  
  ⇒ **Nu se modifică valori.**

- **La k = 2 (intermediar = nodul 2):**  
  De exemplu:  
  - D[1][3] se actualizează:  
    D[1][3] = min{4, D[1][2] + D[2][3]} = min{4, 1+2} = **3**.  
  - D[1][6] se actualizează:  
    D[1][6] = min{∞, D[1][2] + D[2][6]} = min{∞, 1+10} = **11**.  
  (Simetric se vor actualiza şi celelalte intrări.)

- **La k = 3 (intermediar = nodul 3):**  
  Folosind noua valoare D[1][3] = 3:  
  - D[1][4] se poate actualiza:  
    D[1][4] = min{∞, D[1][3] + D[3][4]} = 3+5 = **8**.  
  - D[1][5] se actualizează:  
    D[1][5] = min{∞, D[1][3] + D[3][5]} = 3+12 = **15**.  
  - Alte actualizări similare:  
    D[2][4] = min{∞, D[2][3] + D[3][4]} = 2+5 = **7**,  
    D[6][4] = min{∞, D[6][3] + D[3][4]} = 11+5 = **16** (dacă era ∞ iniţial).

**Rezumat:**  
- **j = 1:** matricea rămâne iniţială (nu se modifică).  
- **j = 2:** se obţine, de exemplu, D[1][3] = 3 şi D[1][6] = 11.  
- **j = 3:** se adaugă noi scurtări: D[1][4] = 8, D[1][5] = 15, D[2][4] = 7, D[6][4] = 16, etc.

---

## 6. Algoritmul lui Prim – exemplu pornind din nodul 4 (graful 1–6)

**Pașii algoritmului:**

1. **Inițial:**  
   - Arborele T începe cu {4}.  
   - Muchiile incidente din 4:  
     • 4–5 (w = 1), 4–3 (w = 5), 4–8 (w = 3).  
   - Se alege minimul: **4–5 (1)**.  
   ⇒ T devine {4, 5}.

2. **A doua iterație:**  
   - Se consideră toate muchiile de la nodurile din T la rest:  
     • Din 4: 4–3 (5) şi 4–8 (3).  
     • Din 5: 5–3 (12).  
   - Minim: **4–8 (3)**.  
   ⇒ T devine {4, 5, 8}.

3. **A treia iterație:**  
   - Se consideră muchiile din T:  
     • Din 8: 8–7 (2) şi 8–9 (6).  
     • Din 4: 4–3 (5).  
     • Din 5: 5–3 (12).  
   - Minim: **8–7 (2)**.  
   ⇒ T devine {4, 5, 7, 8}.

4. **A patra iterație:**  
   - Din T se mai găsește:  
     • Din 4: 4–3 (5).  
     • Din 7: 7–9 (5).  
     • Din 8: 8–9 (6).  
   - Se alege, de exemplu, **4–3 (5)** (sau 7–9, fiind egal ca cost – în funcţie de ordine, se poate alege pe baza ordinii lexicografice).  
   ⇒ T devine {3,4,5,7,8}.

5. **A cincea iterație:**  
   - Din nodurile noi, se consideră:  
     • Din 3: 3–1 (4), 3–6 (11).  
     • Din 7 şi 8: rămân opţiuni spre 9, dar 9 poate fi adăugat şi prin 7–9 (5) sau 8–9 (6).  
   - Se alege **3–1 (4)**.  
   ⇒ T devine {1,3,4,5,7,8}.

6. **A șasea iterație:**  
   - Rămâne să adăugăm nodul 9 sau 6.  
   - Din T, opţiunile:  
     • 7–9 (5) şi 8–9 (6) – alegem **7–9 (5)**.  
   ⇒ T devine {1,3,4,5,7,8,9}.

7. **A șaptea iterație:**  
   - Singurul nod rămas este 6.  
   - Din T, cel mai mic cost pentru a ajunge la 6 este prin **2–6 (10)** sau **3–6 (11)**.  
   - Se alege **2–6 (10)**, presupunând că nodul 2 se adaugă prin legătura cu 3 (sau se obţine conexiunea directă).  
   ⇒ T devine toate nodurile: {1,2,3,4,5,6,7,8,9}.

**Arborele minim obţinut** este format din muchiile:  
- 4–5 (1), 4–8 (3), 8–7 (2), 4–3 (5), 3–1 (4), 2–3 (2) *(sau o muchie echivalentă pentru a conecta 2)*, 7–9 (5), 2–6 (10).  
Totalul costului este suma acestor costuri.

---

## 7. Algoritm pentru arbore parțial de cost minim (MST) – validitate

**Algoritmul dat:**
```
T = (V, E = ∅)
pentru i = 1, |V| - 1:
   Alege componenta conexă C a lui T care conține vârful i
   Alege o muchie de cost minim e, cu o extremitate în C și cealaltă în V \ C
   Adaugă e la T
```

**Justificare:**

- **Corectitudine (prin proprietatea tăieturii):**  
  Pentru orice tăietură (S, V\S) în graf, muchia cu cost minim care le leagă este „sigură” (poate fi adăugată fără a afecta optimitatea).  
  Algoritmul, la fiecare pas, selectează, pentru componenta curentă \( C \) (care este o parte a arborelui parțial deja construit), muchia de cost minim care leagă \( C \) de restul grafului.  
  Astfel, fiecare muchie adăugată este sigură și face parte dintr-un arbore parțial minim, conform teoremei de tăietură.

- **Observație privind implementarea:**  
  Dacă, la o iteraţie, vârful i este deja inclus în componenta existentă, atunci alegerea trebuie să se efectueze pentru a conecta componenta la un nod nou.  
  Astfel, algoritmul are esenţa algoritmului lui Prim, dar indexarea fixă \( i = 1,\dots,|V|-1 \) nu afectează corectitudinea, deoarece fiecare pas adaugă o muchie „safe” ce leagă un nou nod.

**Concluzie:**  
Algoritmul este **corect** – fiecare muchie adăugată satisface condiţia de siguranţă (prin proprietatea tăieturii) și, prin inducţie, rezultatul final este un arbore parţial de cost minim.

---

## 8. Algoritmul Ford–Fulkerson (metoda Edmonds–Karp) pe rețeaua de transport (Graf_8)

**Contextul problemei:**  
- Pe fiecare arc \( e \) sunt indicate valorile \( f(e)/c(e) \) (flux/capacitate).  
- Sursa: \( s = 1 \); destinația: \( t = 7 \).

**Fluxul inițial (conform figurii):**
- \( f(1 \to 2) = 5 \) din \( c(1 \to 2) = 10 \)
- \( f(1 \to 5) = 6 \) din \( c(1 \to 5) = 6 \)  (arc saturat)
- \( f(4 \to 2) = 3 \) din \( c(4 \to 2) = 3 \)  (saturat)
- \( f(5 \to 4) = 0 \) din \( c(5 \to 4) = 3 \)
- \( f(6 \to 4) = 3 \) din \( c(6 \to 4) = 5 \)
- \( f(2 \to 6) = 8 \) din \( c(2 \to 6) = 9 \)
- \( f(3 \to 6) = 3 \) din \( c(3 \to 6) = 3 \)  (saturat)
- \( f(5 \to 3) = 6 \) din \( c(5 \to 3) = 7 \)
- \( f(6 \to 7) = 8 \) din \( c(6 \to 7) = 10 \)
- \( f(3 \to 7) = 3 \) din \( c(3 \to 7) = 7 \)

**Etapele algoritmului (Edmonds–Karp foloseşte BFS pentru a alege cel mai scurt s–t lanţ în rețeaua reziduală):**

1. **Calculul reţelei reziduale iniţiale:**  
   Pentru fiecare arc \( u\to v \):
   - Capacitatea reziduală directă: \( c(u\to v) - f(u\to v) \).  
   - Se adaugă, de asemenea, arcele inverse cu capacitate egală cu fluxul curent \( f(u\to v) \).

   Exemplu:
   - Pentru \( 1\to2 \): \( c - f = 10-5 = 5 \) (și arcul \( 2\to1 \) are 5).
   - Pentru \( 1\to5 \): \( 6-6 = 0 \) (iar \( 5\to1 \) are 6), etc.

2. **Prima iteraţie – căutare de s–t lanţ:**
   - **BFS** găsește un lanţ de tip:  
     \( 1 \to 2 \to 6 \to 7 \).  
     Capacitățile reziduale pe acest lanţ:  
     • \( 1\to2: 5 \)  
     • \( 2\to6: 9-8 = 1 \)  
     • \( 6\to7: 10-8 = 2 \)  
     ⇒ Factorul de augmentare (bottleneck) este **1**.
   - Se actualizează fluxurile:  
     • \( f(1\to2) \) devine 6,  
     • \( f(2\to6) \) devine 9,  
     • \( f(6\to7) \) devine 9.

3. **Actualizarea reţelei reziduale:**  
   Se recalculează capacitățile reziduale pentru arcele afectate și se adaugă arcele inverse corespunzătoare.

4. **Următoarele iteraţii:**  
   - Se caută din nou s–t lanţuri de lungime minimă (prin BFS).  
   - Se pot găsi căi ce implică şi arce inverse (ce reprezintă posibilitatea de a “retracta” fluxul pe anumite muchii, pentru a face loc unei re-distribuiri mai avantajoase).  
   - De exemplu, un posibil lanţ augmentant (cu arce inverse) poate fi:  
     \( 1 \to 2 \) (direct), apoi \( 2 \to 4 \) (arc invers, din cauza saturării lui \( 4\to2 \)), apoi \( 4 \to 6 \) (arc invers, din \( 6\to4 \)), apoi \( 6 \to 3 \) (arc invers din \( 3\to6 \)), şi apoi \( 3 \to 7 \) (direct).  
     Se determină factorul de augmentare (valoare minimă pe lanţ) şi se ajustează fluxurile.

5. **Finalizarea:**  
   - Algoritmul se opreşte când nu mai există niciun s–t lanţ f–nesaturat (BFS nu reușește să ajungă de la 1 la 7 în rețeaua reziduală).  
   - Valoarea maximă a fluxului se va egala cu fluxul total de la sursă (în exemplul nostru, după câteva augmentări, fluxul maxim ajunge la **15**).

6. **Determinarea tăieturii minime:**  
   - Se efectuează o parcurgere în reţeaua reziduală de la \( s = 1 \) și se marchează toate nodurile accesibile.  
   - Să presupunem că, la final, se obţine:  
     \( S = \{1,2\} \) și \( T = V \setminus S = \{3,4,5,6,7\} \).  
   - Tăietura s–t este formată din toate arcele din graful original care merg din \( S \) în \( T \):  
     • De la 1: \( 1\to5 \) (cu \( c=6 \)),  
     • De la 2: \( 2\to6 \) (cu \( c=9 \)).  
   - Capacitatea tăieturii este \( 6+9 = 15 \), egală cu fluxul maxim.

**Concluzie:**  
Algoritmul Ford–Fulkerson (cu strategia Edmonds–Karp) porneşte de la fluxul dat, găseşte augmentări succesive (de exemplu, prin lanţurile  
\( 1\to2\to6\to7 \), apoi prin căi care implică arce inverse) și se opreşte când nu mai există s–t lanţ f–nesaturat. În final, fluxul maxim obţinut este 15, iar o tăietură minimă este dată de partiţia  
- \( S = \{1,2\} \)  
- \( T = \{3,4,5,6,7\} \),  
unde arcele din \( S \) către \( T \) (1–5 şi 2–6) au capacitate totală 15.

---

## 9. Probleme de hamiltonianitate

### a) Demonstrarea conexităţii

**Enunţ:**  
Arătați că un graf cu \( n > 2 \) noduri care îndeplineşte condiţia  
\[
d(x) \ge \frac{n}{2} \quad \text{pentru orice nod } x
\]
este conex.

**Demonstraţie:**  
Să presupunem, spre contradicţie, că graful \( G \) este neconex. Atunci există cel puţin două componente conexe \( G_1 \) şi \( G_2 \). Fie \( u \in G_1 \) şi \( v \in G_2 \).  
- Deoarece \( u \) şi \( v \) nu sunt adiacente, suma gradelor lor satisface:  
  \[
  d(u) + d(v) \le n - 1.
  \]
- Dar, conform ipotezei,  
  \[
  d(u) + d(v) \ge \frac{n}{2} + \frac{n}{2} = n.
  \]
- Astfel, \( n \le n-1 \), o contradicţie.  
Deci, \( G \) este conex.

---

### b) Exemplu de graf nehamiltonian cu două noduri neadiacente cu suma gradelor \( \ge n \)

**Exemplu:**  
Consideraţi graful complet bipartit \( K_{3,4} \) (cu 7 noduri).  
- În \( K_{3,4} \) orice două noduri din aceeaşi parte nu sunt adiacente.  
- Fiecare nod din partea cu 3 noduri are gradul 4, deci pentru două noduri neadiacente din această parte:  
  \[
  d(u) + d(v) = 4 + 4 = 8 \ge 7 = n.
  \]
- Totuşi, \( K_{3,4} \) nu admite ciclu hamiltonian (conform teoremei clasice, un graf bipartit complet are ciclu hamiltonian doar dacă ambele părţi au acelaşi număr de noduri).

---

### c) Demonstrarea condiţiei pentru Hamiltonianitate

**Enunţ:**  
Arătați că dacă un graf \( G \) cu \( n \ge 2 \) noduri are \( m \ge \binom{n-1}{2} + 2 \) muchii, atunci \( G \) este Hamiltonian.

**Schita demonstraţiei:**  
- Se demonstrează că, sub această ipoteză, gradul minim \( \delta(G) \) este cel puțin \( \frac{n}{2} \).  
- Întrucât \( m \ge \frac{(n-1)(n-2)}{2} + 2 \), se poate arăta printr-un calcul combinatorial că nu poate exista un nod cu grad mai mic de \( \frac{n}{2} \) (altfel numărul maxim de muchii ar fi mai mic).  
- Aplicând teorema lui Dirac, care afirmă că un graf simplu cu \( n \ge 3 \) noduri este Hamiltonian dacă \( \delta(G) \ge \frac{n}{2} \), rezultă că \( G \) este Hamiltonian.

---

## 10. Lungimea maximă a unui subsir comun (LCS)

**Algoritmul LCS (programare dinamică):**

Se definește matricea \( L[i,j] \) unde:
- \( L[i,j] \) = lungimea maximă a subsirului comun al primelor \( i \) caractere din primul cuvânt şi primelor \( j \) caractere din al doilea cuvânt.

**Recurenţa:**
- Dacă \( X[i] = Y[j] \) atunci \( L[i,j] = L[i-1,j-1] + 1 \).  
- Altfel, \( L[i,j] = \max\{ L[i-1,j], L[i,j-1] \} \).

**Exemplu: „cerceta” și „retea”**

Să notăm:
- \( X = \text{c e r c e t a} \) (7 litere)
- \( Y = \text{r e t e a} \) (5 litere)

Se construiește o matrice de dimensiuni \( 8 \times 6 \) (inclusiv rândul şi coloana 0, iniţializate cu 0).

*Exemplu parţial de completare:*

|   i\j  | 0 | 1 (r) | 2 (e) | 3 (t) | 4 (e) | 5 (a) |
|:------:|:-:|:-----:|:-----:|:-----:|:-----:|:-----:|
| 0      | 0 | 0     | 0     | 0     | 0     | 0     |
| 1 (c)| 0 | 0     | 0     | 0     | 0     | 0     |
| 2 (e)| 0 | 0     | 1     | 1     | 1     | 1     |
| 3 (r)| 0 | 1     | 1     | 1     | 1     | 1     |
| 4 (c)| 0 | 1     | 1     | 1     | 1     | 1     |
| 5 (e)| 0 | 1     | 2     | 2     | 2     | 2     |
| 6 (t)| 0 | 1     | 2     | 3     | 3     | 3     |
| 7 (a)| 0 | 1     | 2     | 3     | 3     | 4     |

*(Valorile din matrice se obţin conform regulilor recurenţei; exemplul arată cum se "construieşte" soluţia în jos-dreapta.)*

**Interpretare:**  
- Celula \( L[7,5] = 4 \) indică faptul că lungimea maximă a subsirului comun este 4.
- Se pot urmări pașii de decizie (backtracking) pentru a reconstrui subsirul comun.

---

## 11. Drum optim în mina subterană (cu utilizare minimă de dinamită)

**Formularea problemei:**  
- Mina este un graf orientat, în care fiecare arc poate fi parcurs gratuit sau necesită utilizarea dinamită (cost).  
- Scopul este să se găsească un drum de la camera de intrare la camera cu cristalul, minimizând numărul de “dinamite” folosite.

**Algoritm optim:**

Se poate modela problema ca un **drum de cost minim** într-un graf cu costuri nenegative (costul fiecărui arc fiind 0 dacă camera nu este prăbușită sau 1 – (sau o altă valoare corespunzătoare) – dacă este prăbușită).

**Metodă recomandată:**  
- **0–1 BFS:**  
  Deoarece costurile sunt 0 sau 1, se poate folosi o adaptare a BFS care, folosind o dublă coadă (deque), asigură complexitate \( O(V + E) \).
  
**Pași ai algoritmului:**
1. Iniţializează distanţele \( d[u] = \infty \) pentru toate nodurile, cu \( d[s] = 0 \).
2. Folosește un deque; adaugă sursa \( s \).
3. Cât timp deque-ul nu este gol:
   - Extrage un nod \( u \).
   - Pentru fiecare arc \( u \to v \) cu cost \( c \):
     - Dacă \( d[u] + c < d[v] \), actualizează \( d[v] \) şi:
       - Dacă \( c = 0 \), adaugă \( v \) la începutul deque-ului.
       - Dacă \( c = 1 \), adaugă \( v \) la sfârşitul deque-ului.
4. La final, dacă \( d[t] \neq \infty \), se poate reconstrui drumul (prin păstrarea predecesorilor).

**Concluzie:**  
Algoritmul are complexitate \( O(V+E) \) și determină, dacă există, drumul de la camera de intrare la cea cu cristalul, folosind cât mai puțină dinamită (minimizând costul total).

---

Aceasta este rezolvarea detaliată a tuturor cerinţelor din examen.