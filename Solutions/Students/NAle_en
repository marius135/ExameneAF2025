1.
A graph that has a cycle of odd length is not bipartite.
To obtain a bipartite subgraph, nodes are removed along with the adjacent edges that form cycles of length 3.
Removed nodes: 2, 5, 9.
<Student Drawing>
The drawn undirected graph has the edges:
source destination cost
6 3 11
1 3 4
4 3 5
4 8 3
7 8 7
</Student Drawing>

2.
Breadth-first search (BFS) visits, in turn, all unvisited neighbors of a current node, which it puts in a queue, then the next node in the queue becomes the current node. To calculate the minimum distance from the node from which the traversal starts, we use a vector that remembers the distances and we update it using the formula: dist[neighbor] = dist[parent]+1.

<Student Drawing>
Tree formed by the parent vector: {-1,-1,-1, 0, -1, -1, -1, -1, -1}, “-1” represents that the node is not in the tree.
</Student Drawing>
Queue: [4]
Distances: [inf, inf, inf, 0, inf, inf, inf, inf, inf]
Visited: [0, 0, 0, 1, 0, 0, 0, 0, 0]

<Student Drawing>
Tree formed by the parent vector: {-1,-1,4, 0, 4, -1, -1, 4, -1} “-1” represents that the node is not in the tree.
</Student Drawing>
Queue: [3, 5, 8]
Distances: [inf, inf, 1, 0, 1, inf, inf, 1, inf]
Visited: [0, 0, 1, 1, 1, 0, 0, 1, 0]
<Student Drawing>
Tree formed by the parent vector: {3,3,4, 0, 4, 3, -1, 4, -1} “-1” represents that the node is not in the tree.
</Student Drawing>
Queue: [5, 8, 1, 2, 6]
Distances: [2, 2, 1, 0, 1, 2, inf, 1, inf]
Visited: [1, 1, 1, 1, 1, 1, 0, 1, 0]
<Student Drawing>
Tree formed by the parent vector: {3,3,4, 0, 4, 3, 8, 4, 8} “-1” represents that the node is not in the tree.
</Student Drawing>
Queue: [8, 1, 2, 6, 7 , 9]
Distances: [2, 2, 1, 0, 1, 2, 2, 1, 2]
Visited: [1, 1, 1, 1, 1, 1, 1, 1, 1]
The algorithm continues until the queue is empty, but no more neighbors are found.
Time Complexity: O(n+m) (traverses all nodes and edges)

3.
The conditions for an undirected graph to have an Eulerian path are: to be connected, to have 2 nodes with odd degree (start and end) and the rest of the nodes to have even degree.
The graph does not admit an Eulerian path (nodes 2,3,4 and 8 have odd degree)
If we remove edge 2-3, nodes 4 and 8 remain with odd degree, therefore a path that starts from 4 and ends with 8.
3-4-1-2-6-3-5-4-8-9-7-8 = Eulerian path in the obtained graph.
<Student Drawing>
Undirected graph with the edges:
source destination
1 2
1 3
2 6
3 6
3 4
3 5
4 5
4 8
8 9
8 7
7 9
</Student Drawing>

4.
We perform a DF traversal and for each node we retain level[i] = the level of node i in the DF tree
niv_min[i] = min{level[i], A, B} where:
A = min{level[j] | ij back edge}
B = min{level[h] | j descendant of i and jh back edge}

i critical node => there exists j descendant with niv_min[j] >= level[i] or, if i is root and has 2 children

Time Complexity: O(n+m) => efficient
<Student Drawing>
Directed graph with the following edges:
source destination
1 2
2 3
3 4
4 5
4 8
8 7
7 9
3 1
5 3
7 8
9 7
9 8
with the following attached variables, representing niv_min and niv for each node ("->" represents modifications made during the algorithm traversal):

1 1
2 2->1
3 3->1
4 4->3
5 5->3
5 5
6 6->5
7 7->6->5
</Student Drawing>
7: niv_min[9]=5 < 6 = level[7] => NO
8: niv_min[7]=5 >=5 = level[8] => YES
4: niv_min[8]=5 >= 4= level[4] => YES
3: niv_min[4]=3 >=3 = level[3] => YES
critical nodes: 3,4,8

5.
For any 2 nodes i and j, check if I can relax the distance through each node j. We retain the distances in a matrix Aij where A[i][j] = minimum distance between i and j.

Algorithm Completion:
if A[i][h] >= a[i][j]+A[j][h] then
A[i][h] = a[i][j]+A[j][h]

j=1: Only A[2][3] and A[3][2], A[1][2], A[2][1] are modified
j=2: Only A[1][6], A[1][3], A[6][1], A[3][1] are modified
j=3: Only A[1][5], A[5][1], A[6][4], A[4][6] are modified

6.
I'm looking for a node with the minimum cost edge to the formed tree (only from 4). from the nodes not introduced in the tree. It is 5 (with an edge of cost 1).

<Student Drawing>
undirected graph:
source destination cost
4 5 1
</Student Drawing>
Repeat the process until I get n nodes in the tree

<Student Drawing>
undirected graph:
source destination cost
4 5 1
4 8 3
</Student Drawing>
=>
<Student Drawing>
undirected graph:
source destination cost
4 5 1
4 8 3
8 7 2
</Student Drawing>
=>
<Student Drawing>
undirected graph:
source destination cost
4 5 1
4 8 3
8 7 2
7 9 5
</Student Drawing>
=>
<Student Drawing>
undirected graph:
source destination cost
4 5 1
4 8 3
8 7 2
7 9 5
4 3 5
</Student Drawing>
=>
<Student Drawing>
undirected graph:
source destination cost
4 5 1
4 8 3
8 7 2
7 9 5
4 3 5
3 2 2
</Student Drawing>
=>
<Student Drawing>
undirected graph:
source destination cost
4 5 1
4 8 3
8 7 2
7 9 5
4 3 5
3 2 2
2 1 1
</Student Drawing>
=>
<Student Drawing>
undirected graph:
source destination cost
4 5 1
4 8 3
8 7 2
7 9 5
4 3 5
3 2 2
2 1 1
2 6 10
</Student Drawing>
7.
The algorithm is correct because by choosing the minimum cost edge, we ensure the minimum total cost, and the fact that we only choose edges between connected components ensures that we will have a tree (no edges will be added between nodes in the same connected component). At each step, the number of components decreases by 1 (starts from n and after n-1 steps reaches 1) so the final result is connected.

8.
<Student Drawing>
Directed graph represented by the edges:
source destination flow/capacity (-> represents modification during the algorithm)
1 5 6/6
1 2 5->6->7->9/10
5 4 0/3
4 2 3->2->0/3
2 6 8->9/9
6 2 3->2->0/5
5 3 6/7
3 6 3->1/3
3 7 3->5/7
6 7 8->9->10/10
</Student Drawing>

Look for the minimum path with BFS:
s-t unsaturated chain 1-2-6-7 => 1
Look for another minimum path:
s-t unsaturated chain: 1-2-4-6-7 => 1
Look for another minimum path:
s-t unsaturated chain 1-2-4-6-3-7 => 2

It stops => 1 and 2 are one set and the other nodes are the other set, so the minimum cut has the bipartition: {1, 2} and {3,4,5,6}

Direct arcs: 1-5 and 2-6
Inverse arcs: 4-2
Cut Capacity:
6+9=15

9.

a) Let G=(V,E) an undirected graph with |V|=n>2 that satisfies the condition d(x) >=n/2
Assume, by reduction to the absurd, that G is not connected. Then let A,B belong to v with A intersected with B = empty set and A reunited with B = V (partition of V) 2 connected components. We can assume without restricting generality that |A| <= |B|.
So, |A|<=n/2. Let u belong to A a node. u can be united with a maximum of |A|-1 other nodes (from the same connected component) so d(u) <=n/2-1<n/2 absurd!
So, the assumption is false and G is connected.

c)
in this exercise Cn^k represents combinations of n taken k at a time
m>= Cn-1^2 + 2 => G hamiltonian
m>= ((n-1)(n-2))/2 + 2
n(n-1)/2 = (n-1)(n-2)/2 = (n-1)/2 *(n-(n-2)) = n-1 => m >= Cn^2 - (n-1) +2 = Cn^2-n+3 = Cn^2 -(n-3)

I construct the graph kn and eliminate n-3 nodes. Then the number of minimum edges that a node has is 2 (I cut all the n-3 edges from it).

d(x) + d(u) =
{
-> 2+n-2 = n >= n | if the edge to u was deleted
-> n+n-1 = n+1 >= n | if it wasn't deleted
}

for any other 2 non-adjacent nodes u and v, d(u) + d(v) >= n-2+n-2 = 2n-4 >= n => according to Ore's theorem, the graph is hamiltonian.

b)
<Student Drawing>
undirected graph represented by the edges:
source destination
1 2
1 5
1 4
1 3
2 6
5 6
5 3
4 3
3 6
Node 7 isolated

1 and 6 are non-adjacent =>
d(1)=4
d(6)=3 => d(1)+d(6) = 4+3 = 7>= 7

10.
We create a matrix A where A[i][j] is the maximum length of a common subsequence from X[0..i] and Y[0..j].
The matrix will be calculated using the formula:
A[i][j] ={
A[i-1][i-1]+1, if X[i] = Y[j]
max{A[i-1][j], A[i][j-1], if X[i]!= Y[j]
}
∅ c e r c e t a
∅ 0 0 0 0 0 0 0 0
r 0 0 0 1 1 1 1 1
e 0 0 1 1 1 2 2 2
t 0 0 1 1 1 2 3 3
e 0 0 1 1 1 2 3 3
a 0 0 1 1 1 2 3 4
Common subsequence of maximum length: “reta”

11.
Solution
For each node i that is marked as dangerous, we will add a node j with the edge of cost 1 between the 2. We connect node 
j with all the nodes with which i was connected. The other nodes have cost 0. Now the minimum number of explosions means 
the minimum distance between the starting node and the ending node. This problem can be solved with Dijkstra's algorithm 
in O(m log n). An alternative is the BFS 0/1 algorithm. It is a normal BFS, but we will use a deque instead of a normal
queue. If we visit a node through an edge of cost 0, we add it to the front of the deque, otherwise, we add it to the end.

Complexity: O(n + m).