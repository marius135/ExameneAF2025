1. Connected Bipartite Induced Subgraph

Induced Subgraph Nodes: 1, 3, 4, 8, 9

Edges Included: 1-3, 3-4, 4-8, 8-9

Bipartition:

Set A: {1, 4, 9}
Set B: {3, 8}
Explanation:

This subgraph is a path (1-3-4-8-9) forming a tree with no cycles. Trees are bipartite as they can be divided into two sets where edges exist only between sets. The bipartition ensures no intra-set edges. Adding any other node introduces cycles or edges within the same set, violating bipartiteness.

2. BFS from Node 4

BFS Tree:

Download Code
Copy Code
4 (level 0)  
├─3 (level 1)  
│ ├─1 (level 2)  
│ ├─2 (level 2)  
│ └─5 (level 2)  
├─5 (level 1)  
└─8 (level 1)  
  ├─7 (level 2)  
  └─9 (level 2)  
4 (level 0)  
├─3 (level 1)  
│ ├─1 (level 2)  
│ ├─2 (level 2)  
│ └─5 (level 2)  
├─5 (level 1)  
└─8 (level 1)  
  ├─7 (level 2)  
  └─9 (level 2)  
Distances from 4:

4: 0
3,5,8: 1
1,2,7,9: 2
6: Not reachable (disconnected)
Explanation:

BFS explores neighbors in lexicographical order. Starting at 4, visit 3, 5, 8. Next, visit their neighbors (1,2 from 3; 7,9 from 8). Node 6 isn’t connected to 4.

3. Eulerian Path

Initial Graph:

Degrees: 1(2), 2(3), 3(5), 4(4), 5(2), 6(3), 7(2), 8(4), 9(2).
Odd degrees: Nodes 1,2,3,6,8.
Eulerian Path Condition: Exactly 0 or 2 nodes with odd degree. Here, 5 odd nodes.

Solution: Remove two edges to make exactly two odd-degree nodes. Remove edges 3-5 and 3-6. New odd degrees: 3(3→1), 5(1→0), 6(3→2). Now, nodes 1 and 3 have odd degrees.

Eulerian Path: 1-2-3-4-8-9-7-8-4-5-3-6-2.

Necessary & Sufficient Condition: Undirected graph has an Eulerian path iff exactly 0 or 2 vertices have odd degree.

4. Critical Nodes

Algorithm:

Brute Force: Remove each node and check if the graph becomes disconnected.
Efficient (DFS-based): Use Tarjan’s algorithm to find articulation points (nodes whose removal increases connected components).
Example Application:

Articulation Points: 3,4,8. Removing any disconnects the graph.
Explanation:

Node 3 connects 1-2-6 to 4-5-8-9-7.
Node 4 bridges components 3-5 and 8-9-7.
Node 8 links 4-9-7.
5. Floyd-Warshall Algorithm

Steps:

Initialize distance matrix with edge weights.
For each intermediate node ( j ), update ( D[i][k] = \min(D[i][k], D[i][j] + D[j][k]) ).
Matrix Updates (j=1,2,3):

j=1: Update paths through 1. Minimal changes as node 1 has few connections.
j=2: Update paths via 2 (e.g., 1→2→6: distance 1+10=11).
j=3: Update paths involving 3 (e.g., 2→3→4: 2+5=7 < previous 8).
6. Prim's Algorithm from Node 4

Steps:

Start at 4. Add edges to 3(w5),5(w1),8(w3). Choose 5(w1).
Add edges from 5: 3(w12),4(w1). Already in MST.
Next, add 8(w3). From 8, add 9(w6),7(w2). Choose 7(w2).
Continue until all nodes are included.
MST Edges:

4-5(1), 4-3(5), 5-4(1), 8-4(3), 7-8(2), 9-8(6), 3-2(2), 2-1(1), 3-6(10).

7. MST Algorithm Correctness

Answer: Incorrect.

Justification:

The algorithm greedily adds edges but doesn’t ensure global minimality.
It may choose edges forming cycles or higher weight.
Correct algorithms (Kruskal/Prim) use priority based on edge weights, not arbitrary component selection.
8. Ford-Fulkerson (Edmonds-Karp)

Steps:

Residual Graph: Find shortest s-t paths (BFS).
Augmenting Paths:
1→5→3→7 (min capacity 6).
1→2→6→7 (min capacity 8).
Update residuals.
Min Cut: S = {1,5,3}, T = {2,4,6,7}.
Capacity = 5 (1→2) + 6 (5→4) + 7 (3→7) = 18.
9. Graph Theory

a. If δ(G) ≥ n/2, G is connected. Assume otherwise; two components each with ≥ n/2+1 nodes, impossible.

b. Example: Two triangles sharing a node (n=5, sum degrees ≥5 but not Hamiltonian).

c. If m ≥ C(n-1,2)+2, then G is Hamiltonian. Use Dirac’s theorem or closure.

10. LCS Algorithm

Matrix for 'cerceta' vs 'retea':

r	e	t	e	a
c	0	0	0	0	0
e	0	1	1	1	1
r	1	1	1	1	1
c	1	1	1	1	1
e	1	2	2	2	2
t	1	2	3	3	3
a	1	2	3	3	4
LCS: 'reta' (length 4).

11. Optimal Path with Dynamite

Algorithm:

Model as a weighted graph where nodes represent chambers, edges as tunnels.
Assign weight 1 to collapsed chambers (dynamite needed), 0 otherwise.
Find the shortest path from entrance to crystal using Dijkstra’s algorithm.
Output path with minimal total weight (dynamite count).