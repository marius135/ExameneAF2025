OK. Acesta este un examen complex de algoritmi fundamentali. Voi aborda fiecare cerință în detaliu, încercând să fiu cât mai clar și eficient posibil.

**Notă Importantă:** Datorită complexității problemelor și spațiului limitat, voi oferi răspunsuri concise și la obiect. În cadrul unui examen real, ar trebui să detaliați și să justificați fiecare pas.

**Răspunsuri:**

**1. (5p) Subgraf indus bipartit conex cu număr maxim de noduri:**

*   **Subgraf:** {1, 2, 3, 4, 5, 6} sau {7, 8, 9}.
*   **Bipartiție:** Exemplu pentru {1, 2, 3, 4, 5, 6}:
    *   Set 1: {1, 6, 4}
    *   Set 2: {2, 3, 5}
*   **Justificare:** Un graf este bipartit dacă nodurile pot fi împărțite în două mulțimi disjuncte astfel încât fiecare muchie conectează un nod dintr-o mulțime cu un nod din cealaltă mulțime. Se caută subgraful conex de dimensiune maximă care respectă această proprietate.  Observăm că graful original nu este bipartit (cicluri impare).

**2. (5p) Parcurgere în lățime BF(4):**

*   **BF(4):**
    1.  Pornim de la nodul 4. Distanța de la 4 la 4 este 0.
    2.  Vecinii lui 4 (în ordine lexicografică): 3, 5, 8. Distanțele de la 4 la aceștia sunt 1.
    3.  Vecinii lui 3 (nevizitați): 1, 2, 6. Distanțele de la 4 la aceștia sunt 2.
    4.  Vecinii lui 5 (nevizitați): Nimeni.
    5.  Vecinii lui 8 (nevizitați): 7, 9. Distanțele de la 4 la aceștia sunt 2.
    6.  Vecinii lui 1 (nevizitați): Nimeni.
    7.  Vecinii lui 2 (nevizitați): Nimeni.
    8.  Vecinii lui 6 (nevizitați): Nimeni.
    9.  Vecinii lui 7 (nevizitați): Nimeni.
    10. Vecinii lui 9 (nevizitați): Nimeni.

*   **Distanțe de la 4:**
    *   d(4, 4) = 0
    *   d(4, 3) = 1
    *   d(4, 5) = 1
    *   d(4, 8) = 1
    *   d(4, 1) = 2
    *   d(4, 2) = 2
    *   d(4, 6) = 2
    *   d(4, 7) = 2
    *   d(4, 9) = 2

*   **Arbore BFS:**
    *   Rădăcină: 4
    *   Copii lui 4: 3, 5, 8
    *   Copii lui 3: 1, 2, 6
    *   Copii lui 8: 7, 9

**3. (7.5p) Lanț Eulerian:**

*   **Admite lanț Eulerian?** Nu. Un graf neorientat are un lanț eulerian dacă și numai dacă are cel mult două noduri de grad impar. În graful dat, nodurile de grad impar sunt: 1 (grad 2), 2 (grad 3), 5 (grad 2), 6 (grad 3), 7 (grad 2), 9 (grad 2).  Avem 4 noduri de grad impar.
*   **Eliminare muchii:** Eliminăm muchiile (2, 6) și (2, 3).  Nodurile 2 și 6 își modifică gradele, devenind pare.
*   **Strategie:** Am ales muchii incidente cu noduri de grad impar, astfel încât să transformăm cât mai multe noduri de grad impar în noduri de grad par.
*   **Lanț Eulerian (după eliminare):** 1-3-5-4-8-9-7-8-4-1-2-3-6
*   **Condiție necesară și suficientă:** Un graf neorientat are un lanț eulerian dacă și numai dacă este conex și are cel mult două noduri de grad impar.

**4. (7.5p) Noduri Critice (Articulații):**

*   **Algoritm:** Se folosește o parcurgere DFS (Depth-First Search) modificată.  Fiecare nod primește un număr de ordine la intrarea în DFS ( `disc[u]` ) și se calculează un `low[u]` care reprezintă cel mai mic număr de ordine al unui nod accesibil din `u` printr-un lanț care poate conține și muchii de "întoarcere" (muchii care nu fac parte din arborele DFS).

    *   Un nod `u` este critic dacă:
        *   Este rădăcina arborelui DFS și are cel puțin doi copii.
        *   Nu este rădăcină și există un copil `v` al lui `u` astfel încât `low[v] >= disc[u]`.

*   **Exemplificare:**
    1.  Pornim DFS dintr-un nod aleatoriu, de exemplu 1.
    2.  `disc[1] = 1`, `low[1] = 1`
    3.  Explorăm 2: `disc[2] = 2`, `low[2] = 2`
    4.  Explorăm 3: `disc[3] = 3`, `low[3] = 3`
    5.  Explorăm 4: `disc[4] = 4`, `low[4] = 4`
    6.  Explorăm 5: `disc[5] = 5`, `low[5] = 5`
    7.  Întoarcere la 4: `low[4] = min(low[4], disc[3]) = 3`
    8.  Explorăm 8: `disc[8] = 6`, `low[8] = 6`
    9.  Explorăm 7: `disc[7] = 7`, `low[7] = 7`
    10. Explorăm 9: `disc[9] = 8`, `low[9] = 8`
    11. Întoarcere la 7: `low[7] = min(low[7], disc[8]) = 6`
    12. Întoarcere la 8: `low[8] = min(low[8], disc[4]) = 4`
    13. Întoarcere la 4: `low[4] = min(low[4], disc[3]) = 3`
    14. Explorăm 6: `disc[6] = 9`, `low[6] = 9`
    15. Întoarcere la 3: `low[3] = min(low[3], disc[1]) = 1`, `low[3] = min(low[3], disc[2]) = 1`, `low[3] = min(low[3], disc[6]) = 1`
    16. Întoarcere la 2: `low[2] = min(low[2], disc[1]) = 1`, `low[2] = min(low[2], disc[3]) = 1`
    17. Întoarcere la 1: `low[1] = min(low[1], disc[3]) = 1`, `low[1] = min(low[1], disc[2]) = 1`

*   **Noduri critice:**
    *   3: `low[4] = 3 >= disc[3] = 3`, `low[6] = 9 >= disc[3] = 3` deci 3 este un nod critic
    *   4: `low[8] = 4 >= disc[4] = 4`, deci 4 este un nod critic
*   **Explicație:** Nodurile critice sunt cele care, dacă ar fi eliminate, ar crește numărul de componente conexe ale grafului.

**5. (5p) Algoritmul Floyd-Warshall:**

*   **Descriere:** Algoritmul Floyd-Warshall determină distanțele minime între toate perechile de noduri dintr-un graf ponderat. Folosește programare dinamică.

    *   **Inițializare:**  Matricea `D[i][j]` este inițializată cu `w(i, j)` (costul muchiei de la `i` la `j`) dacă există muchie, 0 dacă i = j și cu infinit dacă nu există muchie între `i` și `j`.
    *   **Iterație:**
        ```
        pentru k ←  1, n execută
            pentru i ←  1, n execută
                pentru j ←  1, n execută
                    D[i][j] ← min(D[i][j], D[i][k] + D[k][j])
        ```
        Această iterație consideră fiecare nod `k` ca un potențial nod intermediar pe drumul de la `i` la `j`.

*   **Modificări matrice D (etapele j=1, j=2, j=3):**
    *   **j=1:** Se consideră nodul 1 ca nod intermediar.

    ```
    D[2][1] = min(D[2][1], D[2][1] + D[1][1]) = min(infinit, infinit + 0) = infinit
    D[3][1] = min(D[3][1], D[3][1] + D[1][1]) = min(4, 4 + 0) = 4
    D[4][1] = min(D[4][1], D[4][1] + D[1][1]) = min(infinit, infinit + 0) = infinit
    D[5][1] = min(D[5][1], D[5][1] + D[1][1]) = min(infinit, infinit + 0) = infinit
    D[6][1] = min(D[6][1], D[6][1] + D[1][1]) = min(infinit, infinit + 0) = infinit
    D[7][1] = min(D[7][1], D[7][1] + D[1][1]) = min(infinit, infinit + 0) = infinit
    D[8][1] = min(D[8][1], D[8][1] + D[1][1]) = min(infinit, infinit + 0) = infinit
    D[9][1] = min(D[9][1], D[9][1] + D[1][1]) = min(infinit, infinit + 0) = infinit

    ```
    Similar pentru celelalte noduri.
    *   **j=2:** Se consideră nodul 2 ca nod intermediar.

        ```
        D[1][3] = min(D[1][3], D[1][2] + D[2][3]) = min(4, 1 + 2) = 3
        D[1][6] = min(D[1][6], D[1][2] + D[2][6]) = min(infinit, 1 + 10) = 11
        D[3][6] = min(D[3][6], D[3][2] + D[2][6]) = min(11, 2 + 10) = 11
        D[6][3] = min(D[6][3], D[6][2] + D[2][3]) = min(infinit, infinit + 2) = infinit
        D[6][1] = min(D[6][1], D[6][2] + D[2][1]) = min(infinit, infinit + 1) = infinit

        ```
    *   **j=3:** Se consideră nodul 3 ca nod intermediar.

        ```
        D[1][4] = min(D[1][4], D[1][3] + D[3][4]) = min(infinit, 3 + 5) = 8
        D[1][5] = min(D[1][5], D[1][3] + D[3][5]) = min(infinit, 3 + 12) = 15
        D[1][6] = min(D[1][6], D[1][3] + D[3][6]) = min(11, 3 + 11) = 11
        D[2][4] = min(D[2][4], D[2][3] + D[3][4]) = min(infinit, 2 + 5) = 7
        D[2][5] = min(D[2][5], D[2][3] + D[3][5]) = min(infinit, 2 + 12) = 14
        D[2][6] = min(D[2][6], D[2][3] + D[3][6]) = min(10, 2 + 11) = 10
        ```
    **Important:** Trebuie calculat `D[i][j]` pentru fiecare combinație de `i` și `j` în fiecare etapă `k`.

**6. (5p) Algoritmul lui Prim (pornind din 4):**

1.  **Inițializare:**  Începem cu arborele T = {4}. Nodurile nevizitate sunt {1, 2, 3, 5, 6, 7, 8, 9}.
2.  **Pas 1:** Muchiile incidente cu 4: (4, 3, 5), (4, 5, 1), (4, 8, 3). Alegem muchia de cost minim: (4, 5, 1). T = {4, 5}.
3.  **Pas 2:** Muchiile incidente cu T = {4, 5}: (4, 3, 5), (4, 8, 3), (5, 3, 12). Alegem muchia de cost minim neincidentă cu muchiile deja adăugate: (4, 8, 3). T = {4, 5, 8}.
4.  **Pas 3:** Muchiile incidente cu T = {4, 5, 8}: (4, 3, 5), (5, 3, 12), (8, 9, 6), (8, 7, 2). Alegem muchia de cost minim neincidentă cu muchiile deja adăugate: (8, 7, 2). T = {4, 5, 8, 7}.
5.  **Pas 4:** Muchiile incidente cu T = {4, 5, 8, 7}: (4, 3, 5), (5, 3, 12), (8, 9, 6), (7, 9, 5). Alegem muchia de cost minim neincidentă cu muchiile deja adăugate: (7, 9, 5). T = {4, 5, 8, 7, 9}.
6.  **Pas 5:** Muchiile incidente cu T = {4, 5, 8, 7, 9}: (4, 3, 5), (5, 3, 12), (3, 1, 4), (3, 2, 2), alegem muchia (4, 3, 5), T = {4, 5, 8, 7, 9, 3}.
7.  **Pas 6:** Muchiile incidente cu T = {4, 5, 8, 7, 9, 3}: (3, 1, 4), (3, 2, 2), (3,6,11) alegem muchia (3,2,2), T = {4, 5, 8, 7, 9, 3, 2}
8.  **Pas 7:** Muchiile incidente cu T = {4, 5, 8, 7, 9, 3, 2}: (2,1,1), (2,6,10) alegem muchia (2,1,1) T = {4, 5, 8, 7, 9, 3, 2, 1}
9.  **Pas 8:** Muchiile incidente cu T = {4, 5, 8, 7, 9, 3, 2, 1}: (3,6,11) alegem muchia (3,6,11) T = {4, 5, 8, 7, 9, 3, 2, 1, 6}

**7. (5p) Corectitudinea algoritmului de APM:**

*   **Nu este corect.**
*   **Justificare:** Algoritmul nu garantează că arborele parțial rezultat va avea cost minim. Motivul este că alegerea componentei conexe `C` care conține vârful `i` introduce o restricție artificială.

*   **Contraexemplu (adaptat grafului din examen):** Să presupunem că nodurile sunt etichetate de la 1 la 9.
    *   **i = 1:** `C` = {1}.  Se alege muchia (1, 2) de cost 1.  T = {(1, 2)}.
    *   **i = 2:** `C` = {1, 2}.  Se alege muchia (2, 3) de cost 2. T = {(1, 2), (2, 3)}.
    *   **i = 3:** `C` = {1, 2, 3}. Se alege muchia (3, 4) de cost 5. T = {(1, 2), (2, 3), (3, 4)}.
    *   Continuând în acest mod, este posibil să fim forțați să alegem muchii de cost mai mare decât ar fi necesar pentru a obține un APM. De exemplu, muchia (5, 4) are costul 1, dar este posibil să nu o putem alege la momentul potrivit din cauza restricției asupra componentei conexe care conține nodul curent `i`.
*   **Concluzie:**  Algoritmul nu garantează cost minim, deoarece deciziile locale, bazate pe restricția componentei conexe care conține `i`, pot duce la un rezultat suboptimal global.

**8. (12.5p) Algoritmul Ford-Fulkerson (Edmonds-Karp):**

*   **Pași Edmonds-Karp:**

    1.  **Rețeaua reziduală inițială:** Capacitățile reziduale sunt c(u, v) - f(u, v). Arcele inverse au capacitate egală cu fluxul.

    2.  **Căutare BFS pentru lanț augmentativ de lungime minimă:**

        *   **Iterația 1:** Lanț augmentativ: 1 -> 2 -> 6 -> 7.  Capacitatea minimă: min(5-0, 8-0, 8-0) = 5.  Fluxul se mărește cu 5.

        *   **Iterația 2:** Lanț augmentativ: 1 -> 5 -> 3 -> 7.  Capacitatea minimă: min(6-0, 6-0, 3-0) = 3. Fluxul se mărește cu 3.

        *   **Iterația 3:** Lanț augmentativ: 1 -> 5 -> 4 -> 2 -> 6 -> 7.  Capacitatea minimă: min(3, 0+5, 3-0, 3, 3) = 3. Fluxul se mărește cu 3.

        *   **Iterația 4:** Lanț augmentativ: 1 -> 5 -> 3 -> 6 -> 7.  Capacitatea minimă: min(3, 3, 3, 3) = 3. Fluxul se mărește cu 3.

    3.  **Nu mai există lanțuri augmentative:** Algoritmul se termină.

*   **Tăietură minimă (s-t):**

    *   **Mulțimea S:** Nodurile accesibile din s=1 în rețeaua reziduală finală: {1, 5}
    *   **Mulțimea T:** Restul nodurilor: {2, 3, 4, 6, 7}
    *   **Arce directe:** (1,2), (5,3), (5,4)
    *   **Arce inverse:** Nimic
    *   **Capacitatea tăieturii:** c(1,2) + c(5,3) + c(5,4) = 5 + 6 + 0 = 11.

*   **Justificare:** Algoritmul Ford-Fulkerson garantează găsirea fluxului maxim. Teorema Max-Flow Min-Cut afirmă că fluxul maxim este egal cu capacitatea tăieturii minime. Algoritmul Edmonds-Karp este o implementare specifică a Ford-Fulkerson care alege lanțuri augmentative de lungime minimă, garantând o complexitate polinomială.

**9. (15p) Probleme de grafuri:**

*   **a) Graf cu d(x) >= n/2 este conex:**

    *   **Demonstrație prin contradicție:** Presupunem că graful nu este conex. Atunci, există cel puțin două componente conexe, A și B.
    *   Fie |A| numărul de noduri în A și |B| numărul de noduri în B. Atunci, |A| + |B| = n.
    *   Fie x un nod în A. Atunci, vecinii lui x trebuie să fie tot în A. Deci, d(x) <= |A| - 1.
    *   Similar, pentru un nod y în B, d(y) <= |B| - 1.
    *   Dar, prin ipoteză, d(x) >= n/2 și d(y) >= n/2.
    *   Deci, |A| - 1 >= n/2 și |B| - 1 >= n/2.  Rezultă |A| >= n/2 + 1 și |B| >= n/2 + 1.
    *   Atunci, |A| + |B| >= n + 2, ceea ce contrazice |A| + |B| = n.
    *   Prin urmare, presupunerea inițială (că graful nu este conex) este falsă. Deci, graful este conex.

*   **b) Graf nehamiltonian cu d(u) + d(v) >= n:**

    *   **Exemplu:** Graful complet bipartit K(n/2, n/2), unde n este par.
    *   Un graf bipartit nu poate fi hamiltonian decât dacă cele două părți au același număr de noduri.
    *   Luați două noduri `u` și `v` care nu sunt adiacente (ambele în aceeași parte a grafului bipartit).  Atunci, d(u) = n/2 și d(v) = n/2, deci d(u) + d(v) = n.
    *   Acest graf nu are ciclu hamiltonian.

*   **c) Graf cu m >= C(n-1, 2) + 2 muchii este Hamiltonian:**

    *   **Demonstrație:** Presupunem că graful nu este hamiltonian.  Atunci, putem adăuga muchii până obținem un graf maximal nehamiltonian.
    *   Teorema lui Chvátal: Dacă un graf este maximal nehamiltonian, atunci există un nod `v` cu gradul cel mult `n/2`.
    *   Numărul maxim de muchii într-un graf nehamiltonian este `C(n-1, 2) + 1`.
    *   Prin ipoteză, graful are `m >= C(n-1, 2) + 2` muchii.  Aceasta contrazice faptul că graful este nehamiltonian.
    *   Prin urmare, graful este Hamiltonian.

**10. (7.5p) Subșir comun maximal (Longest Common Subsequence - LCS):**

*   **Algoritm:** Programare dinamică. Se construiește o matrice `LCS[i][j]` unde `LCS[i][j]` reprezintă lungimea LCS a prefixelor `cuvânt1[1...i]` și `cuvânt2[1...j]`.
*   **Recurența:**
    *   Dacă `cuvânt1[i] == cuvânt2[j]`, atunci `LCS[i][j] = LCS[i-1][j-1] + 1`.
    *   Altfel, `LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1])`.
*   **Exemplificare ("cerceta", "retea"):**

```
        ""  r  e  t  e  a
    ""  0  0  0  0  0  0
    c   0  0  0  0  0  0
    e   0  0  1  1  1  1
    r   0  1  1  1  1  1
    c   0  1  1  1  1  1
    e   0  1  2  2  2  2
    t   0  1  2  3  3  2
    a   0  1  2  3  3  3
```

*   **Explicație:**
    *   `LCS[0][j] = LCS[i][0] = 0` (subșirul comun al unui șir vid cu orice alt șir este vid).
    *   `LCS[2][2]` (e din "cer" și e din "re"): caracterele corespund, deci `LCS[2][2] = LCS[1][1] + 1 = 0 + 1 = 1`.
    *   `LCS[3][1]` (r din "cer" și r din "ret"): caracterele corespund, deci `LCS[3][1] = LCS[2][0] + 1 = 0 + 1 = 1`.
    *   `LCS[3][2]` (r din "cer" și e din "ret"): caracterele nu corespund, deci `LCS[3][2] = max(LCS[2][2], LCS[3][1]) = max(1, 1) = 1`.
    *   Lungimea LCS este `LCS[7][5] = 3`.  Un LCS posibil este "ete".

**11. (15p) Problema cu mina subterană și dinamita:**

*   **Modelare:** Graful este reprezentat ca un graf orientat. Fiecare cameră este un nod. Fiecare tunel este o muchie. Camerele prăbușite au un cost de 1 (necesită dinamită), iar camerele intacte au un cost de 0.
*   **Algoritm:**
    1.  **Transformare în graf ponderat:** Atribuie costul 0 muchiilor care intră în camere intacte și costul 1 muchiilor care intră în camere prăbușite.  Acest lucru transformă problema în găsirea drumului de cost minim (în termeni de dinamită) de la camera de intrare la camera cu cristalul.
    2.  **Aplică Dijkstra:** Folosește algoritmul Dijkstra pentru a găsi drumul de cost minim de la nodul de start (camera de intrare) la nodul destinație (camera cu cristalul).  Dijkstra funcționează bine deoarece costurile sunt non-negative (0 sau 1).
*   **Complexitate:** O(E + V log V) folosind o coadă de priorități (heap) pentru implementarea lui Dijkstra, unde V este numărul de camere și E este numărul de tuneluri.
*   **Determinarea drumului:**  În timpul execuției algoritmului Dijkstra, menține un vector de "predecesori".  După ce algoritmul se termină, poți reconstrui drumul optim de la destinație la sursă, urmărind predecesorii.
*   **Verificare existență drum:** Dacă algoritmul Dijkstra nu poate ajunge la nodul destinație, înseamnă că nu există un drum posibil.

**Justificări Generale:**

*   **Corectitudine:** Am folosit algoritmi standard (BFS, Floyd-Warshall, Prim, Ford-Fulkerson, Dijkstra, etc.) care au demonstrații riguroase de corectitudine.
*   **Eficiență:** Am menționat complexitatea algoritmilor folosiți și am ales algoritmi eficienți pentru problemele date.

**Important:** Acesta este un răspuns concis. În timpul unui examen, ar trebui să oferiți explicații mai detaliate, demonstrații și justificări pentru fiecare pas. De asemenea, este esențial să înțelegeți conceptele și algoritmii în profunzime, nu doar să reproduceți pașii.
