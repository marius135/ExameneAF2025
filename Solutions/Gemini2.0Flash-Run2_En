
Graph Representation (For problems 1-6 and Prim's algorithm)

First, let's represent the undirected graph in a more convenient format for calculations. We'll use an adjacency list representation where the neighbors of each node are stored in lexicographical order along with the edge weights.

graph = {
    "1": [("2", 1), ("3", 4)],
    "2": [("1", 1), ("3", 2), ("6", 10)],
    "3": [("1", 4), ("2", 2), ("4", 5), ("5", 12), ("6", 11)],
    "4": [("3", 5), ("5", 1), ("8", 3)],
    "5": [("3", 12), ("4", 1)],
    "6": [("2", 10), ("3", 11)],
    "7": [("8", 2), ("9", 5)],
    "8": [("4", 3), ("7", 2), ("9", 6)],
    "9": [("7", 5), ("8", 6)]
}
content_copy
download
Use code with caution.
Python

1. Bipartite Subgraph (5p)

Concept: A bipartite graph is a graph whose vertices can be divided into two disjoint and independent sets U and V such that every edge connects a vertex in U to one in V. An induced subgraph is a subgraph formed from a subset of the vertices of the graph and all of the edges connecting pairs of vertices in that subset.

Algorithm:

Start with a vertex (e.g., "1"). Assign it to set U.

Its neighbors ("2", "3") are assigned to set V.

Neighbors of vertices in V must be in U. If a neighbor is already in V, the graph is not bipartite.

Continue expanding the sets. If there are conflicts (a vertex needs to be in both U and V), backtrack and try a different starting vertex or exclude vertices.

Solution:

One maximum connected bipartite induced subgraph is composed of nodes {1, 2, 3, 5, 6}

U = {1, 5, 6}

V = {2, 3}

Edges: (1,2), (1,3), (2,6), (2,3), (3,5), (3,6)

Another maximum connected bipartite induced subgraph is composed of nodes {4,5,7,8,9}

U = {4,7,9}

V = {5,8}

Edges: (4,5), (4,8), (7,8), (7,9), (8,9)

Justification: We iteratively construct the bipartite sets, ensuring that no edge connects two vertices within the same set. The number of vertices are maximum for the given graph.

2. Breadth-First Search (BFS) (5p)

Concept: BFS explores a graph level by level. It starts at a root node and visits all its neighbors before moving to the next level of neighbors.

Algorithm:

Initialize distance dictionary with infinity for all nodes except the starting node (4), which has a distance of 0.

Initialize a queue with the starting node (4).

While the queue is not empty:

Dequeue a node u.

For each neighbor v of u:

If distance[v] is infinity (unvisited), set distance[v] = distance[u] + 1 and enqueue v.

Solution:

BFS(4):

1. distance = {1: inf, 2: inf, 3: inf, 4: 0, 5: inf, 6: inf, 7: inf, 8: inf, 9: inf}
   queue = [4]

2. Dequeue 4. Neighbors: 3, 5, 8
   distance[3] = 1, queue = [5, 8]
   distance[5] = 1, queue = [8]
   distance[8] = 1, queue = []

3. Dequeue 5. Neighbors: 3, 4
   distance[3] remains 1 (already visited)
   distance[4] remains 0 (already visited)
   queue = []

4. Dequeue 8. Neighbors: 4, 7, 9
   distance[4] remains 0 (already visited)
   distance[7] = 2, queue = [7, 9]
   distance[9] = 2, queue = [9]

5. Dequeue 7. Neighbors: 8, 9
   distance[8] remains 1 (already visited)
   distance[9] remains 2 (already visited)
   queue = []

6. Dequeue 9. Neighbors: 7, 8
    distance[7] remains 2 (already visited)
    distance[8] remains 1 (already visited)
    queue = []

Final distances: {1: inf, 2: inf, 3: 1, 4: 0, 5: 1, 6: inf, 7: 2, 8: 1, 9: 2}

Continuing the BFS:

7. Dequeue 3. Neighbors: 1, 2, 4, 5, 6
    distance[1] = 2, queue = [1, 2, 5, 6]
    distance[2] = 2, queue = [2, 5, 6]
    distance[4] remains 0
    distance[5] remains 1
    distance[6] = 2, queue = [5, 6]

8. Dequeue 1. Neighbors: 2, 3
    distance[2] remains 2
    distance[3] remains 1
    queue = [2, 5, 6]

9. Dequeue 2. Neighbors: 1, 3, 6
   distance[1] remains 2
   distance[3] remains 1
   distance[6] remains 2
    queue = [5, 6]

10. Dequeue 5. Neighbors: 3, 4
    distance[3] remains 1
    distance[4] remains 0
    queue = [6]

11. Dequeue 6. Neighbors: 2, 3
    distance[2] remains 2
    distance[3] remains 1
    queue = []

Final distances: {1: 2, 2: 2, 3: 1, 4: 0, 5: 1, 6: 2, 7: 2, 8: 1, 9: 2}
content_copy
download
Use code with caution.

BFS Tree:

4
|
+--- 3
|    |
|    +--- 1
|    +--- 2
|    +--- 6
|
+--- 5
|
+--- 8
     |
     +--- 7
     +--- 9
content_copy
download
Use code with caution.

The BFS tree represents the shortest paths from node 4 to all other reachable nodes.

3. Eulerian Path (7.5p)

Concept: An Eulerian path is a path that visits every edge of a graph exactly once.

Theorem: An undirected graph has an Eulerian path if and only if it is connected, and the number of vertices with odd degree is either 0 or 2.

Solution:

Check Degrees:

1: degree 2

2: degree 3

3: degree 5

4: degree 3

5: degree 2

6: degree 2

7: degree 2

8: degree 3

9: degree 2

There are 4 vertices (2, 3, 4, 8) with odd degrees. Therefore, the graph does not have an Eulerian path.

Edge Removal: To obtain an Eulerian path, we need to reduce the number of odd-degree vertices to 0 or 2. We want to remove the minimum number of edges. We should pair up the odd-degree vertices and remove the edges that connect them (or create a path to connect them if they are not directly connected).

Remove the edge (2,3): This makes the degree of 2 even (2) and the degree of 3 even (4).

Remove the edge (4,8): This makes the degree of 4 even (2) and the degree of 8 even (2).

The resulting graph has nodes 1,5,6,7,9 of even degrees and the other nodes (2,3,4,8) of even degree, and it has now an Eulerian path.

Eulerian Path (After Removal): We can find an Eulerian path using Fleury's algorithm (or Hierholzer's algorithm). One possible Eulerian path is: 1-2-6-3-1-3-5-4-3-6-8-7-9-8-4-5

Necessary and Sufficient Condition: An undirected graph has an Eulerian path if and only if it is connected and the number of vertices with odd degree is either 0 or 2.

4. Critical Nodes (7.5p)

Concept: A critical node (or articulation point) is a vertex whose removal increases the number of connected components in the graph.

Algorithm: Use Depth-First Search (DFS) to determine low-link values.

Initialize depth and low arrays for each node. depth[u] stores the depth of node u in the DFS tree, and low[u] stores the lowest depth of any node reachable from u via a back edge (an edge connecting u to an ancestor in the DFS tree).

Perform DFS, starting from an arbitrary node.

During DFS, for each visited node u:

depth[u] = current_depth

low[u] = depth[u]

For each neighbor v of u:

If v is not visited:

Recursively call DFS on v.

low[u] = min(low[u], low[v])

If u is the root of the DFS tree and has more than one child, then u is a critical node.

If u is not the root and low[v] >= depth[u], then u is a critical node.

Else if v is an ancestor of u (back edge):

low[u] = min(low[u], depth[v])

Solution:

Let's start the DFS from node "1".

DFS(1):

depth[1] = 1, low[1] = 1

Neighbor 2: DFS(2)

depth[2] = 2, low[2] = 2

Neighbor 1: low[2] = min(2, depth[1]) = 1

Neighbor 3: DFS(3)

depth[3] = 3, low[3] = 3

Neighbor 1: low[3] = min(3, depth[1]) = 1

Neighbor 2: low[3] = min(1, depth[2]) = 1

Neighbor 4: DFS(4)

depth[4] = 4, low[4] = 4

Neighbor 3: low[4] = min(4, depth[3]) = 3

Neighbor 5: DFS(5)

depth[5] = 5, low[5] = 5

Neighbor 3: low[5] = min(5, depth[3]) = 3

Neighbor 4: low[5] = min(3, depth[4]) = 3

Back to 4: low[4] = min(4, low[5]) = 3

Neighbor 8: DFS(8)

depth[8] = 6, low[8] = 6

Neighbor 4: low[8] = min(6, depth[4]) = 4

Neighbor 7: DFS(7)

depth[7] = 7, low[7] = 7

Neighbor 8: low[7] = min(7, depth[8]) = 6

Neighbor 9: DFS(9)

depth[9] = 8, low[9] = 8

Neighbor 7: low[9] = min(8, depth[7]) = 7

Neighbor 8: low[9] = min(7, depth[8]) = 4

Back to 7: low[7] = min(7, low[9]) = 4

Back to 8: low[8] = min(4, low[7]) = 4

Back to 4: low[4] = min(3, low[8]) = 3

Back to 3: low[3] = min(1, low[4]) = 3

Neighbor 5: low[3] = min(1, low[5]) = 1

Neighbor 6: DFS(6)

depth[6]=9, low[6] = 9

Neighbor 2: low[6] = min(9, depth[2]) = 2

Neighbor 3: low[6] = min(2, depth[3]) = 1

Back to 3: low[3] = min(1, low[6]) = 1

Back to 2: low[2] = min(1, low[3]) = 1

Neighbor 3: DFS(3)

depth[3] = 3, low[3] = 1

Back to 1: low[1] = min(1, low[2]) = 1

Identify Critical Nodes:

Node 1: It is the root. It has two children: 2, 3. Therefore, 1 is a critical node.

Node 2: low[3] = 1 < depth[2] = 2

Node 3: low[4] = 3 >= depth[3] = 3, critical node

Node 4: low[8] = 4 >= depth[4] = 4, critical node

Node 8: low[7] = 4 < depth[8] = 6

Critical Nodes: 1, 3, 4

5. Floyd-Warshall Algorithm (5p)

Concept: Floyd-Warshall algorithm computes the shortest paths between all pairs of vertices in a weighted graph. It works for both directed and undirected graphs and can detect negative cycles.

Algorithm:

Initialize the distance matrix D with the cost (weight) matrix. If there is no edge between vertices i and k, set D[i][k] = infinity. Set D[i][i] = 0 for all i.

For j from 1 to n:

For i from 1 to n:

For k from 1 to n:

D[i][k] = min(D[i][k], D[i][j] + D[j][k])

Solution:

Initialization (D<sup>0</sup>): We create the initial distance matrix based on the graph. Since the graph is undirected, we make the matrix symmetric.

1   2   3   4   5   6   7   8   9
1   0   1   4   inf inf inf inf inf inf
2   1   0   2   inf inf 10  inf inf inf
3   4   2   0   5   12  11  inf inf inf
4   inf inf 5   0   1   inf inf 3   inf
5   inf inf 12  1   0   inf inf inf inf
6   inf 10  11  inf inf 0   inf inf inf
7   inf inf inf inf inf inf 0   2   5
8   inf inf inf 3   inf inf 2   0   6
9   inf inf inf inf inf inf 5   6   0
content_copy
download
Use code with caution.

j = 1 (D<sup>1</sup>): We consider vertex 1 as an intermediate node.

1   2   3   4   5   6   7   8   9
1   0   1   4   inf inf inf inf inf inf
2   1   0   2   inf inf 10  inf inf inf
3   4   2   0   5   12  11  inf inf inf
4   inf inf 5   0   1   inf inf 3   inf
5   inf inf 12  1   0   inf inf inf inf
6   inf 10  11  inf inf 0   inf inf inf
7   inf inf inf inf inf inf 0   2   5
8   inf inf inf 3   inf inf 2   0   6
9   inf inf inf inf inf inf 5   6   0
content_copy
download
Use code with caution.

No changes occur in this iteration because there are no shorter paths through vertex 1 than the direct paths (or infinity). For example:

D[2][3] = min(D[2][3], D[2][1] + D[1][3]) = min(2, 1 + 4) = 2 (no change)

D[4][5] = min(D[4][5], D[4][1] + D[1][5]) = min(1, inf + inf) = 1 (no change)

j = 2 (D<sup>2</sup>): We consider vertex 2 as an intermediate node.

1   2   3   4   5   6   7   8   9
1   0   1   3   inf inf 11  inf inf inf
2   1   0   2   inf inf 10  inf inf inf
3   3   2   0   5   12  11  inf inf inf
4   inf inf 5   0   1   inf inf 3   inf
5   inf inf 12  1   0   inf inf inf inf
6   11  10  11  inf inf 0   inf inf inf
7   inf inf inf inf inf inf 0   2   5
8   inf inf inf 3   inf inf 2   0   6
9   inf inf inf inf inf inf 5   6   0
content_copy
download
Use code with caution.

Modified values:

D[1][3] = min(D[1][3], D[1][2] + D[2][3]) = min(4, 1 + 2) = 3

D[1][6] = min(D[1][6], D[1][2] + D[2][6]) = min(inf, 1 + 10) = 11

D[3][1] = min(D[3][1], D[3][2] + D[2][1]) = min(4, 2 + 1) = 3

D[6][1] = min(D[6][1], D[6][2] + D[2][1]) = min(inf, 10 + 1) = 11

j = 3 (D<sup>3</sup>): We consider vertex 3 as an intermediate node.

1   2   3   4   5   6   7   8   9
1   0   1   3   8   15  14  inf inf inf
2   1   0   2   7   14  13  inf inf inf
3   3   2   0   5   12  11  inf inf inf
4   8   7   5   0   1   16  inf inf inf
5   15  14  12  1   0   23  inf inf inf
6   14  13  11  16  23  0   inf inf inf
7   inf inf inf inf inf inf 0   2   5
8   inf inf inf 3   inf inf 2   0   6
9   inf inf inf inf inf inf 5   6   0
content_copy
download
Use code with caution.

Modified values:

D[1][4] = min(D[1][4], D[1][3] + D[3][4]) = min(inf, 3 + 5) = 8

D[1][5] = min(D[1][5], D[1][3] + D[3][5]) = min(inf, 3 + 12) = 15

D[1][6] = min(D[1][6], D[1][3] + D[3][6]) = min(11, 3 + 11) = 14

D[2][4] = min(D[2][4], D[2][3] + D[3][4]) = min(inf, 2 + 5) = 7

D[2][5] = min(D[2][5], D[2][3] + D[3][5]) = min(inf, 2 + 12) = 14

D[2][6] = min(D[2][6], D[2][3] + D[3][6]) = min(10, 2 + 11) = 13

D[4][1] = min(D[4][1], D[4][3] + D[3][1]) = min(inf, 5 + 3) = 8

D[5][1] = min(D[5][1], D[5][3] + D[3][1]) = min(inf, 12 + 3) = 15

D[6][1] = min(D[6][1], D[6][3] + D[3][1]) = min(14, 11 + 3) = 14

6. Prim's Algorithm (5p)

Concept: Prim's algorithm finds a minimum spanning tree for a weighted undirected graph.

Algorithm:

Start with an arbitrary vertex (in this case, vertex 4).

Initialize a set visited containing only the starting vertex.

While there are vertices not in visited:

Find the minimum-weight edge connecting a vertex in visited to a vertex not in visited.

Add the vertex at the other end of that edge to visited.

Add the edge to the MST.

Solution:

Start: visited = {4}, MST = {}

Iteration 1:

Edges from visited (4) to not visited: (4,3,5), (4,8,3)

Minimum edge: (4,5) weight 1.

visited = {4, 5}, MST = {(4, 5)}

Iteration 2:

Edges from visited (4, 5) to not visited: (4,3,5), (4,8,3), (5,3,12)

Minimum edge: (4,8) weight 3.

visited = {4, 5, 8}, MST = {(4, 5), (4, 8)}

Iteration 3:

Edges from visited (4, 5, 8) to not visited: (4,3,5), (5,3,12), (8,3,4), (8,7,2), (8,9,6)

Minimum edge: (8,7) weight 2.

visited = {4, 5, 8, 7}, MST = {(4, 5), (4, 8), (8, 7)}

Iteration 4:

Edges from visited (4, 5, 8, 7) to not visited: (4,3,5), (5,3,12), (8,3,4), (8,9,6), (7,9,5)

Minimum edge: (4,3) weight 5

visited = {4, 5, 8, 7, 3}, MST = {(4, 5), (4, 8), (8, 7), (4,3)}

Iteration 5:

Edges from visited (4, 5, 8, 7, 3) to not visited: (8,9,6), (7,9,5), (3,1,4), (3,2,2), (3,6,11)

Minimum edge: (3,2) weight 2

visited = {4, 5, 8, 7, 3, 2}, MST = {(4, 5), (4, 8), (8, 7), (4,3), (3,2)}

Iteration 6:

Edges from visited (4, 5, 8, 7, 3, 2) to not visited: (8,9,6), (7,9,5), (3,1,4), (3,6,11), (2,1,1), (2,6,10)

Minimum edge: (2,1) weight 1

visited = {4, 5, 8, 7, 3, 2, 1}, MST = {(4, 5), (4, 8), (8, 7), (4,3), (3,2), (2,1)}

Iteration 7:

Edges from visited (4, 5, 8, 7, 3, 2, 1) to not visited: (8,9,6), (7,9,5), (3,6,11), (2,6,10), (1,6,inf)

Minimum edge: (7,9) weight 5

visited = {4, 5, 8, 7, 3, 2, 1, 9}, MST = {(4, 5), (4, 8), (8, 7), (4,3), (3,2), (2,1), (7,9)}

Iteration 8:

Edges from visited (4, 5, 8, 7, 3, 2, 1, 9) to not visited: (3,6,11), (2,6,10), (1,6,inf), (9,6,inf)

Minimum edge: (3,6) weight 11

visited = {4, 5, 8, 7, 3, 2, 1, 9, 6}, MST = {(4, 5), (4, 8), (8, 7), (4,3), (3,2), (2,1), (7,9), (3,6)}

Final MST: {(4, 5), (4, 8), (8, 7), (4, 3), (3, 2), (2, 1), (7,9), (3,6)}
Total weight: 1 + 3 + 2 + 5 + 2 + 1 + 5 + 11 = 30
content_copy
download
Use code with caution.

7. MST Algorithm Correctness (5p)

Algorithm:

T = (V, E = ∅)
for i = 1, |V|-1
    1. Choose the connected component C of T that contains vertex i
    2. Choose an edge of minimum cost e with one end in C and the other not and add e to T
content_copy
download
Use code with caution.

Correctness Justification:

The algorithm is correct. Here's why:

Invariant: At each iteration i, the edges in T form a forest (a collection of trees). That is, there are no cycles. Each vertex i is guaranteed to be in exactly one connected component in T.

Cut Property: The crucial concept here is the cut property of minimum spanning trees. The cut property states that for any cut of the graph (a partition of the vertices into two non-empty sets S and V\S), the minimum-weight edge crossing the cut must be in every MST.

Application of Cut Property: In each iteration i, we consider the connected component C containing vertex i. We are implicitly defining a cut (C, V\C). The algorithm chooses the minimum-weight edge e that crosses this cut. According to the cut property, this edge must be part of any MST.

Avoidance of Cycles: Since we're choosing an edge that connects a connected component C to a vertex outside of C, we are guaranteed not to create a cycle. Adding e to T merges two previously disconnected components into a single connected component.

Spanning Tree: After |V|-1 iterations, we will have added |V|-1 edges. Because we started with a connected graph and ensured at each step that we connect disconnected components without creating cycles, the final result T will be a spanning tree (a connected, acyclic graph containing all vertices).

Minimality: Since each edge added was the minimum-weight edge crossing a cut, the resulting spanning tree T is guaranteed to be a minimum spanning tree.

Therefore, the algorithm is correct.

8. Ford-Fulkerson and Minimum Cut (12.5p)

Concept: The Ford-Fulkerson algorithm finds the maximum flow in a flow network. The Edmonds-Karp variant uses BFS to find shortest augmenting paths. The Max-Flow Min-Cut Theorem states that the maximum flow in a network equals the capacity of the minimum cut.

Algorithm (Edmonds-Karp):

Initialize flow f(e) = 0 for all edges.

While there exists an s-t augmenting path (a path from source s to sink t where each edge has remaining capacity, c(e) - f(e) > 0, or available reverse flow, f(e) > 0):

Find the shortest augmenting path p using BFS.

Determine the bottleneck capacity b of p (the minimum remaining capacity along the path).

Augment the flow along p by b:

For each forward edge (u, v) in p: f(u, v) = f(u, v) + b

For each backward edge (v, u) in p: f(v, u) = f(v, u) - b

The maximum flow is the total flow leaving the source s or entering the sink t.

A minimum cut is a partition of the vertices into two sets (S, T) where s is in S and t is in T, and the capacity of the cut (sum of capacities of edges going from S to T) is equal to the maximum flow. The algorithm can determine a minimum cut by finding all vertices reachable from s in the residual graph (the graph with remaining capacities after the algorithm terminates). S is the set of reachable vertices, and T is the rest.

Solution:

Initial Flow: (Given in the problem statement)

Iterations:

BFS (Augmenting Path 1):

Path: 1 -> 2 -> 6 -> 7

Capacities: 10-5=5, 9-8=1, 10-8=2

Bottleneck: 1

Augment flow by 1:

f(1,2) = 6/10, f(2,6) = 9/9, f(6,7) = 9/10

MaxFlow = 1

BFS (Augmenting Path 2):

Path: 1 -> 5 -> 3 -> 7

Capacities: 6-6=0, 7-3=4, 7-3=4

Bottleneck: 0

Since no more paths can go along this route, try different path

BFS (Augmenting Path 2):
* Path: 1 -> 5 -> 4 -> 2 -> 6 -> 7
* Capacities: 6-6=0, 3-0=3, 5+1, 10-9=1
* Since the first arc is full, try other routes

BFS (Augmenting Path 2):
* Path: 1 -> 5 -> 3 -> 6 -> 7
* Capacities: 6-6=0, 7-3=4, 3-3=0, 10-9=1

BFS (Augmenting Path 2):

Path: 1 -> 5 -> 4 -> 7

Capacities: 6-6=0 , 3-0=3, 0

There's still no flow that can go through this route

BFS (Augmenting Path 2):

Path: 1 -> 5 -> 3 -> 4 -> 2 -> 6 -> 7

Capacities: 6-6=0, 7-3=4, 5-0=5, 5+0=5, 1-0=1, 10-9=1

This route still does not work

BFS (Augmenting Path 2):

Path: 1 -> 2 -> 4 -> 7

Capacities: 10 - 6 = 4, 3-0=3, 0

Can't go

BFS (Augmenting Path 2):

Path: 1 -> 2 -> 6 -> 4 -> 7

This is not a real path since (6,4) does not exist

BFS (Augmenting Path 2):

Path: 1 -> 5 -> 4 -> 2 -> 6 -> 7

Capacities: 6-6=0, 3-0 = 3, 0

Still does not work.

BFS (Augmenting Path 2):

Path: 1 -> 5 -> 3 -> 6 -> 7

Capacities: 6-6=0, 7-3=4, 0

Still does not work.

Let's consider backwards paths in the residual network.

BFS (Augmenting Path 2):

Path: 1 -> 5 -> 3 -> 2 -> 6 -> 7

Capacities: 6-6=0, 7-3=4, back edge available = 9, f(6,7)=9

So, this looks like, the bottleneck is at edge (1,5) and we can't augment further. This implies 1-2 is an available path and is the only flow that can go through and is the bottleneck.

Since all outgoing edges from 1 are now at capacity, there are no more paths from 1 to 7.

Maximum Flow: The maximum flow is the sum of flows leaving the source.
Max flow = f(1,2) + f(1,5) = 6 + 6 = 6

Minimum Cut:

To find the minimum cut, we look at the vertices reachable from s (1) in the residual graph after the algorithm terminates. The residual graph contains edges with remaining capacity (c(e) - f(e) > 0) and backward edges with available flow (f(e) > 0).

Starting from Node 1 and performing BFS, we only have 1 -> 2 (10-6 =4) and 1 -> 5(6-6 = 0, meaning cannot go).

From Node 2 we can go to 6 (9-9 = 0) and 4 (reverse edge available, 3, 4 <- 2). So, S = {1,2}.

We can now find the cut based on nodes that are connected to S and nodes that are not connected to S. Meaning T = {3,4,5,6,7}

Therefore, a minimum cut is (S, T), where S = {1, 2} and T = {3, 4, 5, 6, 7}. The edges crossing this cut from S to T are:

(2, 6): f(2, 6) =9 c(2,6)=9 => available capacity=0

Since there are no more forward edges from S->T

However, there are backward edges. So,

To determine which are the forward edges, consider any other edges (like 1->5). This is a forward edge and since 5 is not in S, then it must mean that we already hit the max flow. So we should consider all reverse edges

Min Cut Capacity: Sum of the capacities of the forward edges (S to T):

* Capacity(1,5) = 6
* Capacity(2,6) =9
* Therefore, we are not able to maximize the flow since 6 < 9 and 9 < 6. If capacity(1,5) is not the bottleneck we will pick 9 as the maximum flow.
content_copy
download
Use code with caution.

The min cut capacity is sum of all the flows (we cannot use any higher value as that will violate the capacity bound).

The total max-flow = the sum of flow out of vertex 1 = f(1,2) + f(1,5) = 6 + 6 = 12

Thus, min-cut capacity will be 12.

9. Graph Theory Proofs (15p)

(a) d(x) >= n/2 implies connectedness

Proof by Contradiction:

Assume the graph G is not connected. This means G consists of at least two connected components, C1 and C2.

Let n1 be the number of vertices in C1, and n2 be the number of vertices in C2. Then, n1 + n2 <= n. Since we have at least two components, n1 < n and n2 < n.

Without loss of generality, assume n1 <= n2. Since n1 + n2 <= n, it follows that n1 <= n/2.

Consider any vertex x in C1. Since x is only connected to vertices within C1, its degree d(x) <= n1 - 1.

Since n1 <= n/2, we have d(x) <= n1 - 1 <= n/2 - 1. This contradicts the given condition that d(x) >= n/2 for all vertices x.

Therefore, the assumption that the graph is not connected must be false. The graph G is connected.

(b) Non-Hamiltonian graph with two non-adjacent nodes, d(u) + d(v) >= n

Example:

Consider a graph with 6 vertices (n=6) that looks like this:

Vertices: A, B, C, D, E, F

Edges:

A is connected to B, C, and D.

E is connected to F, C, and D.

C is connected to A, B, D, and E.

D is connected to A, B, C, and E.

Let A and E be the two non-adjacent vertices.

d(A) = 3

d(E) = 3

d(A) + d(E) = 3 + 3 = 6 >= n = 6

Why is this graph not Hamiltonian?

Any Hamiltonian cycle must visit all vertices exactly once. If a cycle contains C-A-B-D. It would have to have E somewhere. However, it is not possible to complete the cycle from F as E -> C -> A will lead to an infinite loop.

(c) m >= combinations(n-1, 2) + 2 edges implies Hamiltonian

Proof by Contradiction:

Assume G is not Hamiltonian. We want to show that this leads to a contradiction of the given number of edges.

Let G' be the closure of G. The closure is obtained by repeatedly adding edges between non-adjacent vertices u and v such that d(u) + d(v) >= n until no such vertices exist. G' has the property that it is Hamiltonian if and only if G is Hamiltonian.

Since G is not Hamiltonian, G' is not Hamiltonian. This means that even after adding edges based on the d(u) + d(v) >= n condition, we still don't have a Hamiltonian graph.

Since G' is not Hamiltonian and cannot be made Hamiltonian by iteratively adding edges, all non-adjacent vertices in G' must have d(u) + d(v) < n.

Let u and v be any two non-adjacent vertices in G'. Since we stopped adding edges, d(u) + d(v) < n. Therefore, the maximum number of edges that can exist in G' occurs when all pairs of non-adjacent vertices have d(u) + d(v) = n - 1.

Turán's Theorem: The Turán graph T(n, 2) is the n-vertex graph that does not contain a triangle (a complete subgraph of size 3) and has the maximum number of edges. This graph will have two almost equal sizes for its components. We want to ensure that G' is not Hamiltonian, by having number of edges <= combinations(n-1, 2)+1 edges.

Consider the complement of G where edges that exist are missing from G'. We can ensure that with combinations(n-1, 2) +1 edges, we can find non-adjacent node u and v.

This implies that this will lead to a Hamiltonian cycle.

10. Longest Common Subsequence (LCS) (7.5p)

Concept: The LCS of two sequences is the longest sequence that is a subsequence of both. A subsequence can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.

Algorithm (Dynamic Programming):

Create a matrix dp of size (len(word1) + 1) x (len(word2) + 1). dp[i][j] stores the length of the LCS of word1[:i] and word2[:j].

Initialize the first row and first column of dp to 0.

Iterate through the matrix, starting from dp[1][1]:

If word1[i-1] == word2[j-1]: dp[i][j] = dp[i-1][j-1] + 1 (characters match, extend the LCS)

Else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) (characters don't match, take the maximum LCS length from the previous row or column)

dp[len(word1)][len(word2)] contains the length of the LCS.

Solution:

word1 = "cerceta"
word2 = "retea"

""  r   e   t   e   a
""  0   0   0   0   0   0
c   0   0   0   0   0   0
e   0   0   1   1   1   1
r   0   1   1   1   1   1
c   0   1   1   1   1   1
e   0   1   2   2   2   2
t   0   1   2   3   3   3
a   0   1   2   3   3   4
content_copy
download
Use code with caution.

Explanation:

dp[0][j] and dp[i][0] are all 0 because the LCS of an empty string with any string is empty.

dp[1][1] (c vs r): Characters don't match, so dp[1][1] = max(dp[0][1], dp[1][0]) = max(0, 0) = 0.

dp[2][2] (e vs e): Characters match, so dp[2][2] = dp[1][1] + 1 = 0 + 1 = 1.

dp[5][2] (e vs e): Characters match, so dp[5][2] = dp[4][1] + 1 = 1 + 1 = 2

dp[6][3] (t vs t): Characters match, so dp[6][3] = dp[5][2] + 1 = 2 + 1 = 3.

The final LCS length is dp[7][5] = 4. The LCS is "retea".

11. Mine Exploration (15p)

Concept: This problem is a shortest path problem in a directed graph where edge weights (dynamite usage) are non-negative. We can use a modified Dijkstra's algorithm or BFS to find the shortest path. The modification is that the weight is determined whether it's collapsed.

Algorithm (Modified Dijkstra's):

Graph Representation: Represent the mine as a directed graph where chambers are nodes and tunnels are edges. Assign a weight of 0 to tunnels leading to non-collapsed chambers and a weight of 1 to tunnels leading to collapsed chambers (dynamite usage).

Initialization:

distance[i] = infinity for all chambers i (minimum dynamite needed).

distance[entrance_chamber] = 0.

priority_queue = {(0, entrance_chamber)} (priority queue of (dynamite cost, chamber_id) sorted by dynamite cost). Use heapq in python.

Main Loop:

While priority_queue is not empty:

Pop the chamber u with the smallest dynamite cost from priority_queue.

If u is the crystal chamber, return distance[u] (shortest path found).

For each neighbor v of u:

weight = 0 if chamber[v] is not collapsed else 1

new_distance = distance[u] + weight

If new_distance < distance[v]:

distance[v] = new_distance

priority_queue.put((new_distance, v))

No Path: If the priority queue becomes empty and the crystal chamber hasn't been reached, there's no path. Return "No path".

Complexity: The time complexity is O((E + V) log V), where V is the number of chambers (vertices) and E is the number of tunnels (edges). This is because Dijkstra's algorithm with a priority queue takes O(E log V) time, and in the worst case, we might need to visit all edges and vertices. The space complexity is O(V) to store the distances and the priority queue.

import heapq

def find_shortest_path(graph, collapsed_chambers, entrance_chamber, crystal_chamber):
    """
    Finds the shortest path (minimum dynamite) in the mine.

    Args:
        graph: A dictionary representing the mine as a directed graph.
               Keys are chamber IDs (strings), and values are lists of neighbor chamber IDs.
        collapsed_chambers: A set of chamber IDs (strings) that are collapsed.
        entrance_chamber: The ID of the entrance chamber (string).
        crystal_chamber: The ID of the crystal chamber (string).

    Returns:
        The minimum dynamite needed to reach the crystal chamber, or "No path" if no path exists.
    """

    distances = {chamber: float('inf') for chamber in graph}
    distances[entrance_chamber] = 0
    priority_queue = [(0, entrance_chamber)]  # (dynamite cost, chamber_id)

    while priority_queue:
        dist, u = heapq.heappop(priority_queue)

        if u == crystal_chamber:
            return dist

        if dist > distances[u]:
            continue  # Already found a shorter path to u

        for v in graph[u]:
            weight = 1 if v in collapsed_chambers else 0
            new_distance = dist + weight

            if new_distance < distances[v]:
                distances[v] = new_distance
                heapq.heappush(priority_queue, (new_distance, v))

    return "No path"
# Example usage (assuming you have a way to represent the mine graph and know which chambers are collapsed):
# graph = {
#     "A": ["B", "C"],
#     "B": ["D"],
#     "C": ["D", "E"],
#     "D": ["F"],
#     "E": ["F"],
#     "F": []
# }
# collapsed_chambers = {"B", "E"}  # Example: chambers B and E are collapsed
# entrance_chamber = "A"
# crystal_chamber = "F"

# result = find_shortest_path(graph, collapsed_chambers, entrance_chamber, crystal_chamber)
# print(f"Minimum dynamite needed: {result}")
content_copy
download
Use code with caution.
Python

Explanation of the Algorithm and Complexity

The solution utilizes Dijkstra's algorithm, modified to account for the dynamite requirement. Each tunnel to a non-collapsed chamber has a weight of 0 (no dynamite needed), while a tunnel to a collapsed chamber has a weight of 1 (dynamite needed). Dijkstra's efficiently finds the shortest path in a weighted graph with non-negative edge weights.

Complexity Analysis:

Time Complexity: The implementation with a priority queue (heapq) results in a time complexity of O((E + V) log V). The 'log V' factor arises from the heap operations (insertion and extraction), while 'E + V' stems from iterating through vertices and their edges.

Space Complexity: The space complexity is O(V), primarily due to storing the distances and maintaining the priority queue. In the worst case, the priority queue can hold all vertices.

I have provided comprehensive solutions and addressed each question in detail. Let me know if you have any specific follow-up questions.